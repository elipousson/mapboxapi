[{"path":"https://walker-data.com/mapboxapi/articles/dynamic-maps.html","id":"publishing-vector-tiles-from-r-with-mapbox-tiling-service","dir":"Articles","previous_headings":"","what":"Publishing vector tiles from R with Mapbox Tiling Service","title":"Dynamic web maps with Mapbox Tiling Service and mapgl","text":"Spatial data prepared R can published user’s Mapbox account just steps. steps involve creating tileset sources, datasets stored raw GeoJSON user’s account; preparing tileset recipe, tells Mapbox create vector tiles GeoJSON sources; creating publishing vector tilesets. vector tilesets can integrated directly maps Mapbox GL JS / mapboxer R package, added Mapbox styles using Mapbox Studio. create tileset sources directly R, using function mts_create_source(). ’ll create source dataset want include tileset. Assigning results mts_create_source() object allows us capture function’s list output, useful building tileset recipe. mts_create_source() requires Mapbox access token secret scope write access Mapbox account. Visit Mapbox website information access tokens, store using mb_access_token() function. ’ll also supply username username argument, rather use mine. Large datasets can take minutes upload account depending connection speed. upload succeeded, ’ll get message like : tileset ID also stored id element returned list. request failed, get error message telling . ’ll now use tileset IDs prepare recipe. MTS recipes JSON documents translate tileset sources vector tiles. Preparing recipe using MTS documentation can complicated many options, mapboxapi tries simplify process bit: mts_make_recipe() general “recipe creation” function takes one recipe layers formats configuration appropriately MTS API. Recipe layers can prepared R list hand, preferably recipe_layer() function helps users understand range options available. Feature- tile- specific options available feature_options() tile_options(), respectively. named list translated JSON object (curly braces); unnamed list translated JSON array (square brackets). recipe include two layers (counties tracts). recipe layer requires tileset source ID, minimum zoom level (minzoom), maximum zoom level (maxzoom). recipe relatively simple, MTS recipes concerned; include required arguments (though layers can viewed beyond maximum zoom level overzooming) well directions max layer size tracts, ensuring can see many tracts possible zoomed . preparing MTS recipe, can passed mts_validate_recipe() function make sure formatted correctly. get message ✔ tileset recipe valid!; function also returns TRUE FALSE can error handling tileset creation pipelines wish. Just two steps required publish new tileset. create tileset mts_create_tileset(): empty tileset created Mapbox account. populate tileset, publish mts_publish_tileset() check status tileset, can head Mapbox account find tileset Tilesets tab. tileset published, ’ll able browse tileset review recipe.","code":"county_source <- mts_create_source(   data = county_broadband,   tileset_id = \"county_broadband\",   username = \"kwalkertcu\" )  tract_source <- mts_create_source(   data = tract_broadband,   tileset_id = \"tract_broadband\",   username = \"kwalkertcu\" ) ✔ Successfully created tileset source with the ID 'mapbox://tileset-source/kwalkertcu/tract_broadband'. Use your source ID to build your tileset's recipe. broadband_recipe <- mts_make_recipe(   counties = recipe_layer(     source = county_source$id,     minzoom = 2,     maxzoom = 7   ),   tracts = recipe_layer(     source = tract_source$id,     minzoom = 7,     maxzoom = 12,     tiles = tile_options(       layer_size = 2500     )   ) ) mts_validate_recipe(broadband_recipe) mts_create_tileset(   tileset_name = \"us_broadband\",   username = \"kwalkertcu\",   recipe = broadband_recipe ) mts_publish_tileset(   tileset_name = \"us_broadband\",   username = \"kwalkertcu\" )"},{"path":"https://walker-data.com/mapboxapi/articles/dynamic-maps.html","id":"using-vector-tilesets-in-r-with-the-mapgl-package","dir":"Articles","previous_headings":"","what":"Using vector tilesets in R with the mapgl package","title":"Dynamic web maps with Mapbox Tiling Service and mapgl","text":"mapgl R package flexible R interface Mapbox GL JS, Mapbox’s JavaScript web mapping library massive amount features. mapboxapi mapgl work quite nicely together; mapboxapi can handle creation maintenance vector tileset pipelines, mapgl handles visualization tiles. add_vector_source() function mapgl allows users load remote vector tile sources Mapbox account; add_fill_layer() function helps users add layers tileset sources. Given ’ve already tiled county tract data, can visualize 3000+ US counties 80,000+ Census tracts intelligently map. code used (click “Show code” view ) uses mapgl visualize counties Census tracts scale-dependent manner. small zooms (7), counties display; larger zooms (7 ), view switch Census tracts.","code":"library(mapgl)  mapboxgl(style = mapbox_style(\"light\"),          zoom = 3,          center = c(-96, 37.5)) |>    add_vector_source(     id = \"broadband\",     url = \"mapbox://kwalkertcu.us_broadband\"   ) |>    add_fill_layer(     id = \"county\",     source = \"broadband\",     source_layer = \"counties\",     fill_color = \"blue\",     fill_outline_color = \"black\",     fill_opacity = 0.5,     max_zoom = 7   ) |>    add_fill_layer(     id = \"tracts\",     source = \"broadband\",     source_layer = \"tracts\",     fill_color = \"red\",     fill_outline_color = \"black\",     fill_opacity = 0.5,     min_zoom = 7   )"},{"path":"https://walker-data.com/mapboxapi/articles/dynamic-maps.html","id":"styling-vector-tiles-with-mapbox-gl-js-and-mapboxer","dir":"Articles","previous_headings":"Using vector tilesets in R with the mapgl package","what":"Styling vector tiles with Mapbox GL JS and mapboxer","title":"Dynamic web maps with Mapbox Tiling Service and mapgl","text":"Mapbox GL JS many, many options available users customize styling vector tiles. options voluminous, mapgl includes variety helper functions assist styling. example modifies map using following options: Albers projection appropriate United States used instead default Globe projection. Counties Census tracts styled using linear interpolation interpolate() function inspired ColorBrewer YlGnBU palette. Census tracts, \"case\" option used NA values make tracts missing data mostly transparent.","code":"broadband_map <- mapboxgl(style = mapbox_style(\"light\"),          zoom = 3,          center = c(-96, 37.5),          projection = \"albers\",          parallels = c(29.5, 45.5)) |>    add_vector_source(     id = \"broadband\",     url = \"mapbox://kwalkertcu.us_broadband\"   ) |>    add_fill_layer(     id = \"county\",     source = \"broadband\",     source_layer = \"counties\",     fill_color = interpolate(       column = \"estimate\",       values = c(33, 65, 97),       stops = c(\"#edf8b1\", \"#7fcdbb\", \"#2c7fb8\")     ),     fill_opacity = 0.5,     max_zoom = 7,     popup = \"estimate\"   ) |>    add_fill_layer(     id = \"tracts\",     source = \"broadband\",     source_layer = \"tracts\",     fill_color = interpolate(       column = \"estimate\",       values = c(33, 65, 97),       stops = c(\"#edf8b1\", \"#7fcdbb\", \"#2c7fb8\"),       na_color = \"white\"     ),     fill_opacity = 0.5,     min_zoom = 7,     popup = \"estimate\"   )  broadband_map"},{"path":"https://walker-data.com/mapboxapi/articles/dynamic-maps.html","id":"adding-a-custom-built-legend","dir":"Articles","previous_headings":"Using vector tilesets in R with the mapgl package","what":"Adding a custom-built legend","title":"Dynamic web maps with Mapbox Tiling Service and mapgl","text":"map data styled relationship locations’ broadband access, ’ll also want add legend map communicate information viewers clearly. add_legend() function mapgl accommodates continuous legends (default, ’ll use ) along categorical legends.","code":"broadband_map |>    add_legend(     \"Households with broadband access\",     values = c(\"33%\", \"65%\", \"97%\"),     colors = c(\"#edf8b1\", \"#7fcdbb\", \"#2c7fb8\"),      position = \"bottom-left\"   )"},{"path":"https://walker-data.com/mapboxapi/articles/geocoding.html","id":"geocoding-with-mapbox","dir":"Articles","previous_headings":"","what":"Geocoding with Mapbox","title":"Geocoding with Mapbox in mapboxapi","text":"core skill analysts practicing location intelligence geocoding. Geocoding refers conversion description place geographic coordinates - typically longitude (X) latitude (Y). common place description use address, vary form around world. mapboxapi offers interface Mapbox’s brand-new v6 Geocoder package version 0.6. Let’s explore features. Basic address geocoding, forward geocoding, implemented mb_geocode() function. mb_geocode() accepts description place, returns length-2 vector XY coordinates representing location place. Let’s try . mb_geocode() also accepts structured input R list, useful want clearly specify components address. ’s example works: mb_geocode() can also return simple features object option output = \"sf\" . Simple features (sf) objects, sf R package, primary way vector (points, lines, polygons) spatial data represented R. mapboxapi tightly integrated sf package, ’ll gain experience working sf objects workshop. Let’s assign result mb_geocode() variable, map interactively Mapbox GL JS via mapgl R package.. Mapbox also offers reverse geocoding, takes XY coordinates attempts convert coordinates description place (like address) location. Reverse geocoding available mapboxapi mb_reverse_geocode() function.","code":"library(mapboxapi) ## Usage of the Mapbox APIs is governed by the Mapbox Terms of Service. ## Please visit https://www.mapbox.com/legal/tos/ for more information. mb_geocode(\"445 5th Ave, New York NY 10016\") ## [1] -73.98188  40.75162 mb_geocode(   structured_input = list(     address_line1 = \"445 5th Ave\",     place = \"New York\",     region = \"NY\",     postcode = \"10016\"   ) ) ## [1] -73.98188  40.75162 library(mapgl)  office <- mb_geocode(\"445 5th Ave, New York NY 10016\", output = \"sf\")  mapboxgl(center = c(office$longitude, office$latitude), zoom = 15) |>    add_markers(office, popup = \"full_address\") mb_reverse_geocode(c(-73.98188, 40.75162)) ## [1] \"445 5th Avenue, New York, New York 10016, United States\""},{"path":"https://walker-data.com/mapboxapi/articles/geocoding.html","id":"workflow-batch-geocoding","dir":"Articles","previous_headings":"Geocoding with Mapbox","what":"Workflow: batch geocoding","title":"Geocoding with Mapbox in mapboxapi","text":"One-geocoding illustrated useful targeted analyses building apps (’ll see works next week). larger analyses, however, ’ll want geocode addresses bulk. process called batch geocoding. Batch geocoding typically involves sending table addresses geocoding service getting back XY coordinates addresses. v6 geocoder, Mapbox opened batch geocoding users, now implemented latest release mapboxapi. Let’s try real-world dataset. ’ll working dataset Adult Residential Care facilities state California, obtained State California Open Data portal. can find dataset mapboxapi’s GitHub repository vignettes/data. ’ll read dataset read_csv() function, available tidyverse suite tools. haven’t worked tidyverse , offers integrated collection packages make life much easier working data. notice dataset 25,000 rows. perfect candidate geocoding, describes locations adult care facility doesn’t include longitude latitude, can’t currently mapped. geocode facilities - Mapbox’s free tier offers 100,000 free geocodes per month - isn’t necessary. Let’s instead clean dataset filter specific county - Ventura County west Los Angeles. dataset represents currently licensed adult care facilities Ventura County, number 118. data ready passed mb_batch_geocode(). mb_batch_geocode() can take single column, search_column, contains full addresses. case, address split across multiple columns, can map corresponding arguments function. simple features object geometry type POINT returned. mb_batch_geocode() tries make geocoding simple possible : table addresses , sf object ready mapping analysis. note new accuracy confidence columns returned output object. accuracy gives information type geocode (see Mapbox documentation explanations) confidence gives level confidence Mapbox geocoding result, ranging “exact” “low”. Let’s map geocoded results clustered circles using mapgl package.","code":"library(tidyverse)  ca_care <- read_csv(\"data/community-care-licensing-adult-residential-facility-locations.csv\")  ca_care ## # A tibble: 25,402 × 16 ##    `Facility Type`                    `Facility Number` `Facility Name` Licensee ##    <chr>                                          <dbl> <chr>           <chr>    ##  1 Adult Res Facility for Persons wi…         435201914 LIFE SERVICES … LIFE SE… ##  2 Adult Res Facility for Persons wi…         415201928 SAINT FRANCIS … ALBACRU… ##  3 Adult Res Facility for Persons wi…         415201932 ATENAR HOME, I… ATENAR … ##  4 Adult Res Facility for Persons wi…          15201936 CHABLIS HOME    NATIONA… ##  5 Adult Res Facility for Persons wi…          15201935 REGENT HOME     NATIONA… ##  6 Adult Res Facility for Persons wi…         435201962 VAST HORIZONS,… VAST HO… ##  7 Adult Res Facility for Persons wi…         435201963 VAST HORIZONS,… VAST HO… ##  8 Adult Res Facility for Persons wi…         435202005 CA NATIONAL ME… NATIONA… ##  9 Adult Res Facility for Persons wi…         435202006 CA NATIONAL ME… NATIONA… ## 10 Adult Res Facility for Persons wi…         435202007 FLORA HOME      NATIONA… ## # ℹ 25,392 more rows ## # ℹ 12 more variables: `Facility Administrator` <chr>, ## #   `Facility Telephone Number` <chr>, `Facility Address` <chr>, ## #   `Facility City` <chr>, `Facility State` <chr>, `Facility Zip` <chr>, ## #   `Regional Office` <dbl>, `County Name` <chr>, FAC_CAPACITY <dbl>, ## #   `Facility Status` <chr>, `Closed Date` <chr>, `License First Date` <chr> library(janitor) ##  ## Attaching package: 'janitor' ## The following objects are masked from 'package:stats': ##  ##     chisq.test, fisher.test ventura_care <- read_csv(\"data/community-care-licensing-adult-residential-facility-locations.csv\") |>    clean_names() |>    filter(facility_status == \"Licensed\", county_name == \"VENTURA\") ## Rows: 25402 Columns: 16 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## chr (13): Facility Type, Facility Name, Licensee, Facility Administrator, Fa... ## dbl  (3): Facility Number, Regional Office, FAC_CAPACITY ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ventura_care ## # A tibble: 118 × 16 ##    facility_type   facility_number facility_name licensee facility_administrator ##    <chr>                     <dbl> <chr>         <chr>    <chr>                  ##  1 Adult Resident…       561701197 IBARRA ADULT… IBARRA,… MARIA S. CASTILLO      ##  2 Adult Resident…       561702356 COTTONWOOD, … CORTES,… FLORO CORTES           ##  3 Adult Resident…       561703268 MOUNTAIN VIE… VENIS C… CACCAM, VENIS 98       ##  4 Adult Resident…       561703272 CACCAM'S RES… VENIS C… VENIS CACCAM           ##  5 Adult Resident…       561703412 CUDAL BOARD … PERFECT… PERFECTO P. CUDAL      ##  6 Adult Resident…       565800397 RMC RESIDENT… CARINO … RICHARD T. CARINO II   ##  7 Adult Resident…       561703776 BARNARD FAMI… IBARRA,… KARLA IBARRA           ##  8 Adult Resident…       561703832 JOSEPHINE'S … CARINO … RICHARD T. CARINO II   ##  9 Adult Resident…       565800005 GEMILAN HOME… CAFUIR,… MELANIE MARIN          ## 10 Adult Resident…       565800010 MOUNTAIN VIE… CACCAM,… ADELINA ANDERSON       ## # ℹ 108 more rows ## # ℹ 11 more variables: facility_telephone_number <chr>, facility_address <chr>, ## #   facility_city <chr>, facility_state <chr>, facility_zip <chr>, ## #   regional_office <dbl>, county_name <chr>, fac_capacity <dbl>, ## #   facility_status <chr>, closed_date <chr>, license_first_date <chr> ventura_care_sf <- ventura_care |>    mb_batch_geocode(     address_line1 = \"facility_address\",     place = \"facility_city\",     region = \"facility_state\",     postcode = \"facility_zip\"   )  ventura_care_sf ## Simple feature collection with 118 features and 19 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: -119.2763 ymin: 34.14292 xmax: -118.6592 ymax: 34.44916 ## Geodetic CRS:  WGS 84 ## # A tibble: 118 × 20 ##    facility_type   facility_number facility_name licensee facility_administrator ##  * <chr>                     <dbl> <chr>         <chr>    <chr>                  ##  1 Adult Resident…       561701197 IBARRA ADULT… IBARRA,… MARIA S. CASTILLO      ##  2 Adult Resident…       561702356 COTTONWOOD, … CORTES,… FLORO CORTES           ##  3 Adult Resident…       561703268 MOUNTAIN VIE… VENIS C… CACCAM, VENIS 98       ##  4 Adult Resident…       561703272 CACCAM'S RES… VENIS C… VENIS CACCAM           ##  5 Adult Resident…       561703412 CUDAL BOARD … PERFECT… PERFECTO P. CUDAL      ##  6 Adult Resident…       565800397 RMC RESIDENT… CARINO … RICHARD T. CARINO II   ##  7 Adult Resident…       561703776 BARNARD FAMI… IBARRA,… KARLA IBARRA           ##  8 Adult Resident…       561703832 JOSEPHINE'S … CARINO … RICHARD T. CARINO II   ##  9 Adult Resident…       565800005 GEMILAN HOME… CAFUIR,… MELANIE MARIN          ## 10 Adult Resident…       565800010 MOUNTAIN VIE… CACCAM,… ADELINA ANDERSON       ## # ℹ 108 more rows ## # ℹ 15 more variables: facility_telephone_number <chr>, facility_address <chr>, ## #   facility_city <chr>, facility_state <chr>, facility_zip <chr>, ## #   regional_office <dbl>, county_name <chr>, fac_capacity <dbl>, ## #   facility_status <chr>, closed_date <chr>, license_first_date <chr>, ## #   matched_address <chr>, accuracy <chr>, confidence <chr>, ## #   geometry <POINT [°]> mapboxgl(bounds = ventura_care_sf) |>    add_circle_layer(     id = \"care\",     source = ventura_care_sf,     circle_color = \"blue\",     circle_stroke_color = \"white\",     circle_stroke_width = 2,     cluster_options = cluster_options(       count_stops = c(0, 25, 50)     ),     tooltip = \"facility_name\"   )"},{"path":"https://walker-data.com/mapboxapi/articles/geocoding.html","id":"using-mapboxs-geocoder-in-shiny","dir":"Articles","previous_headings":"","what":"Using Mapbox’s geocoder in Shiny","title":"Geocoding with Mapbox in mapboxapi","text":"mapboxapi also helps build Mapbox’s geocoder Shiny apps. mapboxGeocoderInput() function allows use Mapbox geocoder Shiny input. geocoding result captured value named input (e.g. input$geocode), can passed downstream analyses maps Shiny app. package also includes two functions help convert geocoder’s result usable output: geocoder_as_xy(), converts length-2 vector longitude latitude coordinates; geocoder_as_sf(), converts result sf POINT object. ’s minimal example use mapboxGeocoderInput() Shiny app Leaflet package. code follows image - try !","code":"library(shiny) library(bslib) library(leaflet) library(mapboxapi)  ui <- page_sidebar(   title = \"Address finder\",   sidebar = sidebar(     p(\"Use the geocoder to find an address!\"),     mapboxGeocoderInput(\"geocoder\",                         placeholder = \"Search for an address\"),     width = 300   ),    card(     leafletOutput(\"map\")   ) )  server <- function(input, output) {   output$map <- renderLeaflet({     leaflet() |>        addProviderTiles(provider = providers$OpenStreetMap) |>        setView(lng = -96.805,               lat = 32.793,               zoom = 12)   })    observe({     xy <- geocoder_as_xy(input$geocoder)          leafletProxy(\"map\") |>        clearMarkers() |>        addMarkers(         lng = xy[1],         lat = xy[2]       ) |>        flyTo(lng = xy[1],             lat = xy[2],             zoom = 14)   }) |>      bindEvent(input$geocoder, ignoreNULL = TRUE)    }  shinyApp(ui, server)"},{"path":"https://walker-data.com/mapboxapi/articles/mapping.html","id":"interactive-and-static-mapping-with-mapbox-styles","dir":"Articles","previous_headings":"","what":"Interactive and static mapping with Mapbox styles","title":"Mapping with mapboxapi","text":"Let’s say ’ve designed custom map style Mapbox Studio ’d like incorporate R projects. example, ’ll use Mapbox’s Cartogram tool generate custom map style R logo.  can retrieve style ID Mapbox account, use list_styles() function mapboxapi get ID. style ID Mapbox username, addMapboxTiles() function allows direct incorporation style R Leaflet project. cases, may interested static map rather interactive one. Static maps can created mapboxapi two ways. Static maps can generated directly mapboxapi static_mapbox() function. function accepts sf polygon/linestring (limited size) marker overlays.  output object magick R package can customized magick functions. Alternatively, users might interested retrieving static tiles use basemap tmap ggplot2 maps. input sf object, get_static_tiles() function retrieve static tiles raster object around input. example fetches standard Light Mapbox basemap uses basemap demographic data obtained tidycensus.","code":"library(leaflet) library(mapboxapi)  leaflet() %>%   addMapboxTiles(style_id = \"ckb83x2ur02oa1hpiq9zdt1i2\",                  username = \"kwalkertcu\") %>%   setView(lng = -74.0051,           lat = 40.7251,           zoom = 13) points_of_interest <- tibble::tibble(   longitude = c(-73.99405, -74.00616, -73.99577, -74.00761),   latitude = c(40.72033, 40.72182, 40.71590, 40.71428)   )  prepped_pois <- prep_overlay_markers(   data = points_of_interest,   marker_type = \"pin-l\",   label = 1:4,   color = \"#fff\" )  map <- static_mapbox(   style_id = \"ckb83x2ur02oa1hpiq9zdt1i2\",   username = \"kwalkertcu\",   overlay_markers = prepped_pois,    width = 1200,   height = 800 )  map library(tidycensus) library(tmap)  travis_income <- get_acs(   geography = \"tract\",   variables = \"B19013_001\",   state = \"TX\",   county = \"Travis\",   geometry = TRUE,   year = 2019 )  travis_tiles <- get_static_tiles(   location = travis_income,   zoom = 9,   style_id = \"light-v9\",   username = \"mapbox\" )  tm_shape(travis_tiles) +    tm_rgb() +    tm_shape(travis_income) +    tm_polygons(col = \"estimate\",                 alpha = 0.5, palette = \"cividis\",                title = \"Median household income\\n2015-2019 ACS\") +    tm_layout(legend.outside = TRUE) +    tm_credits(\"Basemap © Mapbox, © OpenStreetMap\", position = c(\"RIGHT\", \"BOTTOM\"))"},{"path":"https://walker-data.com/mapboxapi/articles/mapping.html","id":"reading-vector-tile-data-into-r","dir":"Articles","previous_headings":"","what":"Reading vector tile data into R","title":"Mapping with mapboxapi","text":"Mapbox styles interactive maps generally delivered vector tiles, can visualized way R mapdeck R package providing style information obtained Mapbox Studio. mapboxapi also allows read data vector tilesets directly R sf objects. example, let’s say want grab data vector tileset nearby one points interest just mapped. can accomplished get_vector_tiles() function appropriate tileset ID, can obtained Mapbox account. location query can coordinate pair, address, sf object. get back number layers, including roads, labels, buildings, vector tile zoom 15 intersects input coordinates. elements processed sf objects can mapped R tools:","code":"vector_extract <- get_vector_tiles(   tileset_id = \"mapbox.mapbox-streets-v8\",   location = c(-73.99405, 40.72033),   zoom = 15 )  names(vector_extract) ## [1] \"building\"           \"landuse\"            \"place_label\"        ## [4] \"poi_label\"          \"road\"               \"structure\"          ## [7] \"transit_stop_label\" \"water\" library(ggplot2)  ggplot(vector_extract$building$polygons) +    geom_sf() +    theme_void()"},{"path":"https://walker-data.com/mapboxapi/articles/navigation.html","id":"routing-with-mapboxapi","dir":"Articles","previous_headings":"","what":"Routing with mapboxapi","title":"Using Mapbox navigation services with mapboxapi","text":"mb_directions() function computes route origin destination, optionally along multiple points sf object. Output options include route route split route legs sf linestring, full routing output R list additional applications. Instructions available variety different languages: Optimized routes along multiple coordinates available mb_optimized_route() function:","code":"library(mapboxapi) library(leaflet)  my_route <- mb_directions(   origin = \"10 Avenue de Wagram, 75008 Paris France\",   destination = \"59 Rue de Tocqueville, 75017 Paris France\",   profile = \"cycling\",   steps = TRUE,   language = \"fr\" )  leaflet(my_route) %>%   addMapboxTiles(style_id = \"light-v9\",                  username = \"mapbox\") %>%   addPolylines() my_route$instruction ##  [1] \"Se diriger vers le nord-est\"                             ##  [2] \"Tourner à gauche\"                                        ##  [3] \"Tourner à droite sur l’avenue de Wagram\"                 ##  [4] \"Continuer tout droit pour rester sur l’avenue de Wagram\" ##  [5] \"Tourner à droite sur la rue du Faubourg Saint-Honoré\"    ##  [6] \"Tourner à gauche sur la place des Ternes\"                ##  [7] \"Tourner à droite sur la place des Ternes\"                ##  [8] \"Tourner à droite sur l’avenue de Wagram\"                 ##  [9] \"Tourner légèrement à droite sur la rue Cardinet\"         ## [10] \"Tourner à gauche sur la rue de Tocqueville\"              ## [11] \"Tourner à gauche sur l’impasse Léger\"                    ## [12] \"Tourner à droite\"                                        ## [13] \"Vous êtes arrivé à votre destination\" library(sf)  to_visit <- data.frame(     X = c(-0.209307, -0.185875, -0.216877, -0.233511, -0.234541),     Y = c(5.556019, 5.58031, 5.582528, 5.566771, 5.550209)   ) %>%   st_as_sf(coords = c(\"X\", \"Y\"), crs = 4326)  optimized_route <- mb_optimized_route(to_visit,                                       profile = \"driving-traffic\")  optimized_map <- static_mapbox(   style_id = \"light-v9\",   username = \"mapbox\",   overlay_sf = optimized_route$route,   overlay_style = list(     stroke = \"#144708\"   ),   overlay_markers = prep_overlay_markers(     data = optimized_route$waypoints,     marker_type = \"pin-l\",     label = optimized_route$waypoints$waypoint_index,     color = \"144708\"   ),   height = 800,   width = 1200 )  optimized_map"},{"path":"https://walker-data.com/mapboxapi/articles/navigation.html","id":"isochrones-and-travel-time-matrices","dir":"Articles","previous_headings":"","what":"Isochrones and travel-time matrices","title":"Using Mapbox navigation services with mapboxapi","text":"Mapbox Isochrone API returns polygons representing isochrones, areas reachable within given travel time, around given location. mapboxapi returns Mapbox isochrones sf objects visualization analysis. Input locations can coordinate pairs, addresses, sf objects . example returns three walking isochrones around Kremlin Moscow; users can also optionally get street network-aware distances using distance argument instead time supplying vector distances meters. Travel-time matrices available mb_matrix() function. Requests rate-limited internally conform Mapbox API limits; ’ve made internal modifications larger-scale matrices large many--many matrices (25 source coordinates 25 destination coordinates) yet supported. mb_matrix() returns R matrix object cell represents travel time origin destination pair. Coordinate pairs, addresses, sf objects can used inputs. sf polygons used input, mb_matrix() calculate travel times based polygon centroids, double-checked possible routing errors.","code":"library(mapdeck)  isochrones <- mb_isochrone(\"The Kremlin, Moscow Russia\",                             time = c(4, 8, 12),                            profile = \"walking\")   mapdeck(style = mapdeck_style(\"light\")) %>%   add_polygon(data = isochrones,                fill_colour = \"time\",               fill_opacity = 0.5,               legend = TRUE) library(tigris) philly_tracts <- tracts(\"PA\", \"Philadelphia\", cb = TRUE, class = \"sf\") downtown_philly <- mb_geocode(\"Philadelphia City Hall, Philadelphia PA\")  time_to_downtown <- mb_matrix(philly_tracts, downtown_philly)  philly_tracts$time <- time_to_downtown  mapdeck(style = mapdeck_style(\"light\")) %>%   add_polygon(data = philly_tracts,                fill_colour = \"time\",               fill_opacity = 0.6,               legend = TRUE)"},{"path":"https://walker-data.com/mapboxapi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kyle Walker. Author, maintainer. Eli Pousson. Contributor. Anthony North. Contributor, copyright holder. Miles McBain. Contributor.","code":""},{"path":"https://walker-data.com/mapboxapi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Walker K (2024). mapboxapi: R Interface 'Mapbox' Web Services. R package version 0.6.2, https://walker-data.com/mapboxapi/, https://github.com/walkerke/mapboxapi.","code":"@Manual{,   title = {mapboxapi: R Interface to 'Mapbox' Web Services},   author = {Kyle Walker},   year = {2024},   note = {R package version 0.6.2, https://walker-data.com/mapboxapi/},   url = {https://github.com/walkerke/mapboxapi}, }"},{"path":"https://walker-data.com/mapboxapi/index.html","id":"mapboxapi","dir":"","previous_headings":"","what":"mapboxapi","title":"Use Mapbox Web Services in R","text":"mapboxapi R package interfaces Mapbox web services APIs. purpose help R users incorporate suite Mapbox tools spatial data science projects. Install CRAN following command: get started, sign Mapbox account generate access token. Set public secret token use package mb_access_token(): ’ve set token, ready get started using package. following example integrates Mapbox maps, navigation, search services plot five-minute walking isochrone interactive Leaflet map using Mapbox style: Read following articles see can package: Mapping mapboxapi Using navigation services mapboxapi Creating uploading Mapbox vector tilesets Geocoding Mapbox mapboxapi Dynamic web maps Mapbox Tiling Service mapgl find project useful, consider supporting package development via PayPal, hiring give workshop mapboxapi hiring consult project. Send note kyle@walker-data.com interests ! can also get updates package development signing newsletter: Please note: Use Mapbox services mapboxapi governed Mapbox’s Terms Service account restrictions.","code":"install.packages(\"mapboxapi\") library(mapboxapi) mb_access_token(\"pk.eyas...\", install = TRUE) library(leaflet)  walk_5min <- mb_isochrone(\"2850 S University Dr, Fort Worth TX 76129\",                           profile = \"walking\",                           time = 5)  leaflet(walk_5min) %>%   addMapboxTiles(style_id = \"streets-v11\",                  username = \"mapbox\") %>%   addPolygons()"},{"path":"https://walker-data.com/mapboxapi/reference/addMapboxTiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a Mapbox style in a Leaflet map — addMapboxTiles","title":"Use a Mapbox style in a Leaflet map — addMapboxTiles","text":"See Mapbox Static Tiles API documentation information.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/addMapboxTiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a Mapbox style in a Leaflet map — addMapboxTiles","text":"","code":"addMapboxTiles(   map,   style_id,   username,   style_url = NULL,   scaling_factor = c(\"1x\", \"0.5x\", \"2x\"),   access_token = NULL,   layerId = NULL,   group = NULL,   options = leaflet::tileOptions(),   data = leaflet::getMapData(map),   attribution = TRUE )"},{"path":"https://walker-data.com/mapboxapi/reference/addMapboxTiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a Mapbox style in a Leaflet map — addMapboxTiles","text":"map map widget object created leaflet::leaflet() style_id style ID Mapbox style username Mapbox username style_url Mapbox style URL scaling_factor scaling factor use rendering tiles. scaling factor \"1x\" (default) returns 512px 512px tiles. factor \"1x\" returns 256x256 tiles, factor \"2x\" returns 1024x1024 tiles. access_token Mapbox access token; can set mb_access_token(). layerId layer ID group name group Mapbox tile layer belong (use Shiny modify layers control Leaflet workflow) options list extra options (optional) data data object used derive argument values; can provided initial call leaflet::leaflet() attribution TRUE, pass standard attribution leaflet::addTiles(). FALSE, attribution NULL. attribution can also character string including HTML.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/addMapboxTiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a Mapbox style in a Leaflet map — addMapboxTiles","text":"pointer Mapbox Static Tiles API translated appropriately leaflet R package.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/addMapboxTiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a Mapbox style in a Leaflet map — addMapboxTiles","text":"","code":"if (FALSE) { # \\dontrun{  library(leaflet) library(mapboxapi)  leaflet() %>%   addMapboxTiles(     style_id = \"light-v9\",     username = \"mapbox\"   ) %>%   setView(     lng = -74.0051,     lat = 40.7251,     zoom = 13   ) } # }"},{"path":"https://walker-data.com/mapboxapi/reference/check_upload_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the status of a Mapbox upload — check_upload_status","title":"Check the status of a Mapbox upload — check_upload_status","text":"Check status Mapbox upload","code":""},{"path":"https://walker-data.com/mapboxapi/reference/check_upload_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the status of a Mapbox upload — check_upload_status","text":"","code":"check_upload_status(upload_id, username, access_token = NULL)"},{"path":"https://walker-data.com/mapboxapi/reference/check_upload_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the status of a Mapbox upload — check_upload_status","text":"upload_id upload ID username account's username access_token Mapbox access token","code":""},{"path":"https://walker-data.com/mapboxapi/reference/feature_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify feature options for an MTS recipe layer — feature_options","title":"Specify feature options for an MTS recipe layer — feature_options","text":"Specify feature options MTS recipe layer","code":""},{"path":"https://walker-data.com/mapboxapi/reference/feature_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify feature options for an MTS recipe layer — feature_options","text":"","code":"feature_options(   id = NULL,   bbox = NULL,   attributes = list(zoom_element = NULL, set = NULL, allowed_output = NULL),   filter = NULL,   simplification = NULL )"},{"path":"https://walker-data.com/mapboxapi/reference/feature_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify feature options for an MTS recipe layer — feature_options","text":"id column representing feature ID. See https://docs.mapbox.com/mapbox-tiling-service/reference/#id-expression. bbox bounding box within rendered features clipped. See https://docs.mapbox.com/mapbox-tiling-service/reference/#bounding-box. attributes named list attribute transformations. zoom_element specifies attribute made available different zoom levels; set allows calculate new attributes existing attributes processing tiles; allowed_output specifies columns carried output tiles.  See https://docs.mapbox.com/mapbox-tiling-service/reference/#feature-attributes. filter expression determines features tileset filtered. See https://docs.mapbox.com/mapbox-tiling-service/reference/#feature-filters information specify filter. simplification Rules feature simplification.  See https://docs.mapbox.com/mapbox-tiling-service/reference/#feature-simplification information specify .","code":""},{"path":"https://walker-data.com/mapboxapi/reference/feature_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify feature options for an MTS recipe layer — feature_options","text":"list feature options, likely used recipe_layer().","code":""},{"path":[]},{"path":"https://walker-data.com/mapboxapi/reference/feature_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify feature options for an MTS recipe layer — feature_options","text":"","code":"if (FALSE) { # \\dontrun{ library(tidycensus) library(mapboxapi) options(tigris_use_cache = TRUE)  # Get the national data on median age us_median_age_tract <- get_acs(   geography = \"tract\",   variables = \"B01002_001\",   state = c(state.abb, \"DC\"),   year = 2020,   geometry = TRUE )  # Get it for counties as well us_median_age_county <- get_acs(   geography = \"county\",   variables = \"B01002_001\",   year = 2020,   geometry = TRUE )  # Create a source from the datasets mts_create_source(data = us_median_age_tract,                   tileset_id = \"us_median_age_tract\",                   username = \"your_mapbox_username\")  mts_create_source(data = us_median_age_county,                   tileset_id = \"us_median_age_county\",                   username = \"your_mapbox_username\")  # Build out the recipe.  First, create a recipe layer with # appropriate options.  We'll want a larger tile size and to restrict the minzoom # to 4; a maxzoom of 12 will be fine as we can overzoom beyond that # # Your source ID will be returned by `mts_create_source()`, so use that value tract_layer <- recipe_layer(   source = \"mapbox://tileset-source/your_mapbox_username/us_median_age_tract\",   minzoom = 4,   maxzoom = 12,   tiles = tile_options(layer_size = 2500) )  county_layer <- recipe_layer(   source = \"mapbox://tileset-source/your_mapbox_username/us_median_age_county\",   minzoom = 2,   maxzoom = 5 )  recipe <- mts_make_recipe(tracts = tract_layer, counties = county_layer)  # Validate the recipe mts_validate_recipe(recipe)  # Create a tileset from the recipe mts_create_tileset(tileset_name = \"median_age_acs\",                    username = \"your_mapbox_username\",                    recipe = recipe)  # Publish the tileset mts_publish_tileset(tileset_name = \"median_age_acs\",                     username = \"your_mapbox_username\")  # If necessary, update the recipe mts_update_recipe(tileset_name = \"median_age_acs\",                   username = \"your_mapbox_username\",                   recipe = new_recipe)  # Publish the tileset again after you've updated the recipe mts_publish_tileset(tileset_name = \"median_age_acs\",                     username = \"your_mapbox_username\") } # }"},{"path":"https://walker-data.com/mapboxapi/reference/geocoder_as_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert the result of a mapboxGeocoderInput() geocoded location to an sf object — geocoder_as_sf","title":"Convert the result of a mapboxGeocoderInput() geocoded location to an sf object — geocoder_as_sf","text":"Convert result mapboxGeocoderInput() geocoded location sf object","code":""},{"path":"https://walker-data.com/mapboxapi/reference/geocoder_as_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert the result of a mapboxGeocoderInput() geocoded location to an sf object — geocoder_as_sf","text":"","code":"geocoder_as_sf(input)"},{"path":"https://walker-data.com/mapboxapi/reference/geocoder_as_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert the result of a mapboxGeocoderInput() geocoded location to an sf object — geocoder_as_sf","text":"input name Shiny input using mapboxGeocoderInput(), likely something like input$geocode","code":""},{"path":"https://walker-data.com/mapboxapi/reference/geocoder_as_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert the result of a mapboxGeocoderInput() geocoded location to an sf object — geocoder_as_sf","text":"sf object can used downstream Shiny applications.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/geocoder_as_xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert the results of a mapboxGeocoderInput() geocoded location to XY coordinates — geocoder_as_xy","title":"Convert the results of a mapboxGeocoderInput() geocoded location to XY coordinates — geocoder_as_xy","text":"Convert results mapboxGeocoderInput() geocoded location XY coordinates","code":""},{"path":"https://walker-data.com/mapboxapi/reference/geocoder_as_xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert the results of a mapboxGeocoderInput() geocoded location to XY coordinates — geocoder_as_xy","text":"","code":"geocoder_as_xy(input)"},{"path":"https://walker-data.com/mapboxapi/reference/geocoder_as_xy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert the results of a mapboxGeocoderInput() geocoded location to XY coordinates — geocoder_as_xy","text":"input name Shiny input using mapboxGeocoderInput(), likely something like input$geocode","code":""},{"path":"https://walker-data.com/mapboxapi/reference/geocoder_as_xy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert the results of a mapboxGeocoderInput() geocoded location to XY coordinates — geocoder_as_xy","text":"length-2 vector representing geocoded longitude/latitude coordinates location.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/get_geocoder_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Include Mapbox Geocoder dependencies — get_geocoder_dependencies","title":"Include Mapbox Geocoder dependencies — get_geocoder_dependencies","text":"function loads necessary JavaScript CSS Mapbox Geocoder.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/get_geocoder_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Include Mapbox Geocoder dependencies — get_geocoder_dependencies","text":"","code":"get_geocoder_dependencies()"},{"path":"https://walker-data.com/mapboxapi/reference/get_static_tiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Get static tiles from a Mapbox style for use as a basemap — get_static_tiles","title":"Get static tiles from a Mapbox style for use as a basemap — get_static_tiles","text":"function queries Mapbox Static Tiles API composites tiles raster suitable use basemap tmap ggplot2 (ggspatial::layer_spatial() function. returns raster layer corresponds either input bounding box buffered area around input shape.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/get_static_tiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get static tiles from a Mapbox style for use as a basemap — get_static_tiles","text":"","code":"get_static_tiles(   location,   zoom,   style_id,   username,   style_url = NULL,   scaling_factor = c(\"1x\", \"2x\"),   buffer_dist = 5000,   units = \"m\",   crop = TRUE,   access_token = NULL )"},{"path":"https://walker-data.com/mapboxapi/reference/get_static_tiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get static tiles from a Mapbox style for use as a basemap — get_static_tiles","text":"location input location like request tiles. Can length-4 vector representing bounding box, sf object. input sf object supplied, use buffer_dist argument control much area want capture around layer. input sf object can arbitrary coordinate reference system, length-4 bounding box vector supplied instead must represent WGS84 longitude/latitude coordinates order c(xmin, ymin, xmax, ymax). zoom zoom level like return tiles. style_id Mapbox style ID; retrieve Mapbox account. username Mapbox username. style_url Mapbox style URL. scaling_factor scaling factor use; one \"1x\" \"2x\". buffer_dist distance buffer around input sf object determining tile extent, specified units. Defaults 5000. units Units buffer_dist; defaults \"m\" (meters). buffer_dist units class object, units argument ignored. crop Whether crop result specified bounding box buffer area. Defaults TRUE; FALSE return extent overlapping tiles. access_token Mapbox access token. Supply set globally mb_access_token() function.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/get_static_tiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get static tiles from a Mapbox style for use as a basemap — get_static_tiles","text":"raster layer tiles requested Mapbox style representing area around input location. raster layer projected Web Mercator coordinate reference system.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/get_static_tiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get static tiles from a Mapbox style for use as a basemap — get_static_tiles","text":"","code":"if (FALSE) { # \\dontrun{  library(mapboxapi) library(tigris) library(tmap) library(ggspatial) library(ggplot2)  ny_tracts <- tracts(\"NY\", \"New York\", cb = TRUE)  ny_tiles <- get_static_tiles(   location = ny_tracts,   zoom = 10,   style_id = \"light-v9\",   username = \"mapbox\" )  # tmap usage: tm_shape(ny_tiles) +   tm_rgb() +   tm_shape(ny_tracts) +   tm_polygons(alpha = 0.5, col = \"navy\") +   tm_credits(\"Basemap (c) Mapbox, (c) OpenStreetMap\",     position = c(\"RIGHT\", \"BOTTOM\")   )  # ggplot2 usage: ggplot() +   layer_spatial(ny_tiles) +   geom_sf(data = ny_tracts, fill = \"navy\", alpha = 0.5) +   theme_void() +   labs(caption = \"Basemap (c) Mapbox, (c) OpenStreetMap\") } # }"},{"path":"https://walker-data.com/mapboxapi/reference/get_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about a style or list styles from a Mapbox account — get_style","title":"Get information about a style or list styles from a Mapbox account — get_style","text":"See Mapbox Styles API documentation information.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/get_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about a style or list styles from a Mapbox account — get_style","text":"","code":"get_style(style_id, username, style_url = NULL, access_token = NULL)  list_styles(username, access_token = NULL)"},{"path":"https://walker-data.com/mapboxapi/reference/get_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information about a style or list styles from a Mapbox account — get_style","text":"style_id style ID username Mapbox username style_url Mapbox style URL access_token Mapbox public secret access token; set mb_access_token()","code":""},{"path":"https://walker-data.com/mapboxapi/reference/get_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get information about a style or list styles from a Mapbox account — get_style","text":"get_style returns list information selected style. list_styles returns data frame information styles Mapbox account","code":""},{"path":"https://walker-data.com/mapboxapi/reference/get_vector_tiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve vector tiles from a given Mapbox tileset — get_vector_tiles","title":"Retrieve vector tiles from a given Mapbox tileset — get_vector_tiles","text":"Retrieve vector tiles given Mapbox tileset","code":""},{"path":"https://walker-data.com/mapboxapi/reference/get_vector_tiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve vector tiles from a given Mapbox tileset — get_vector_tiles","text":"","code":"get_vector_tiles(tileset_id, location, zoom, access_token = NULL)"},{"path":"https://walker-data.com/mapboxapi/reference/get_vector_tiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve vector tiles from a given Mapbox tileset — get_vector_tiles","text":"tileset_id name tileset ID; names can retrieved Mapbox account location location like retrieve tiles. input sf object, function return data tiles intersect object's bounding box. input coordinate pair address, data returned specific tile contains input. zoom zoom level request; larger zoom levels return detail take longer process. access_token Mapbox access token; can set mb_access_token().","code":""},{"path":"https://walker-data.com/mapboxapi/reference/get_vector_tiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve vector tiles from a given Mapbox tileset — get_vector_tiles","text":"list sf objects representing different layer types found requested vector tiles.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/get_vector_tiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve vector tiles from a given Mapbox tileset — get_vector_tiles","text":"","code":"if (FALSE) { # \\dontrun{  library(mapboxapi) library(ggplot2)  vector_extract <- get_vector_tiles(   tileset_id = \"mapbox.mapbox-streets-v8\",   location = c(-73.99405, 40.72033),   zoom = 15 )  ggplot(vector_extract$building$polygons) +   geom_sf() +   theme_void() } # }"},{"path":"https://walker-data.com/mapboxapi/reference/layer_static_mapbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a static Mapbox ggplot2 layer or tmap basemap — layer_static_mapbox","title":"Make a static Mapbox ggplot2 layer or tmap basemap — layer_static_mapbox","text":"functions wrap static_mapbox() ggspatial::layer_spatial() tmap::tm_rgb() support use images Mapbox Static Maps API ggplot2 tmap basemaps.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/layer_static_mapbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a static Mapbox ggplot2 layer or tmap basemap — layer_static_mapbox","text":"","code":"layer_static_mapbox(   location = NULL,   buffer_dist = 1000,   units = \"m\",   style_id,   username,   style_url = NULL,   overlay_sf = NULL,   overlay_style = NULL,   overlay_markers = NULL,   width = NULL,   height = NULL,   scale = 0.5,   scaling_factor = c(\"1x\", \"2x\"),   attribution = TRUE,   logo = TRUE,   before_layer = NULL,   access_token = NULL,   ... )  tm_static_mapbox(   location = NULL,   buffer_dist = 1000,   units = \"m\",   style_id,   username,   style_url = NULL,   overlay_sf = NULL,   overlay_style = NULL,   overlay_markers = NULL,   width = NULL,   height = NULL,   scale = 0.5,   scaling_factor = c(\"1x\", \"2x\"),   attribution = TRUE,   logo = TRUE,   before_layer = NULL,   access_token = NULL,   ... )"},{"path":"https://walker-data.com/mapboxapi/reference/layer_static_mapbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a static Mapbox ggplot2 layer or tmap basemap — layer_static_mapbox","text":"location input location like request tiles. Can length-4 vector representing bounding box, sf object. input sf object supplied, use buffer_dist argument control much area want capture around layer. input sf object can arbitrary coordinate reference system, length-4 bounding box vector supplied instead must represent WGS84 longitude/latitude coordinates order c(xmin, ymin, xmax, ymax). buffer_dist distance buffer around input sf object determining static map, specified units. location POINT object 2 rows less buffer_dist 0 NULL, 1 unit buffer applied try ensure creation valid bounding box map area. units Units buffer_dist; defaults \"m\" (meters). buffer_dist units class object, units argument ignored. style_id style ID (required style_url NULL). username Mapbox username (required style_url = NULL). style_url Mapbox style url; defaults NULL. overlay_sf overlay sf object (optional). function convert sf object GeoJSON plot basemap style. Spatial data large trigger error, added style Mapbox Studio instead. overlay_style named list vectors specifying style sf overlay. Possible names \"stroke\", \"stroke-width\" (\"stroke_width\"), \"stroke-opacity\" (\"stroke_opacity\"), \"fill\", \"fill-opacity\" (\"fill_opacity\"). fill stroke color values can specified six-digit hex codes color names, opacity width values supplied floating-point numbers. overlay_style NULL, style values can pulled columns names overlay_sf. overlay_markers prepared overlay markers (optional). See function prep_overlay_markers information specify marker overlay. width, height map width height; defaults NULL scale ratio scale output image; scale = 1 return largest possible image. defaults 0.5 scaling_factor scaling factor tiles; either \"1x\" (default) \"2x\" attribution Controls whether attribution image. Defaults TRUE. FALSE, watermarked attribution removed image. still legal responsibility attribute maps use OpenStreetMap data, includes maps Mapbox. specify attribution = FALSE, legally required include proper attribution elsewhere webpage document. logo Controls whether Mapbox logo image. Defaults TRUE. before_layer character string specifies hierarchy layer elements overlay inserted. overlay placed just specified layer given Mapbox styles. List layer ids map style get_style(style_id = style_id, username = username, style_url = style_url, access_token = access_token)[[\"layers\"]][[\"id\"]] access_token Mapbox access token; can set mb_access_token. ... additional parameters passed ggspatial::layer_spatial tmap::tm_rgb","code":""},{"path":"https://walker-data.com/mapboxapi/reference/layer_static_mapbox.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a static Mapbox ggplot2 layer or tmap basemap — layer_static_mapbox","text":"function uses different approach get_static_tiles(). Instead, layer_static_mapbox() based largely layer_mapbox() snapbox package (available MIT license. key differences layer_static_mapbox() layer_mapbox(). \"scale\" parameter equivalent \"scale_ratio\" parameter snapbox. Setting scale_factor = \"2x\" equivalent setting retina = TRUE. functions return basemaps larger single tile (maximum 1280 1280 pixels). tm_static_mapbox(), tmap::tm_shape called projection = 3857 tmap::tm_rgb called max.value = 1.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/layer_static_mapbox.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a static Mapbox ggplot2 layer or tmap basemap — layer_static_mapbox","text":"Eli Pousson, eli.pousson@gmail.com Anthony North, anthony.jl.north@gmail.com Miles McBain, miles.mcbain@gmail.com","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mapboxGeocoderInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Use Mapbox's Geocoder widget in a Shiny application — mapboxGeocoderInput","title":"Use Mapbox's Geocoder widget in a Shiny application — mapboxGeocoderInput","text":"Use Mapbox's Geocoder widget Shiny application","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mapboxGeocoderInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use Mapbox's Geocoder widget in a Shiny application — mapboxGeocoderInput","text":"","code":"mapboxGeocoderInput(   inputId,   access_token = NULL,   placeholder = \"Search\",   search_within = NULL,   proximity = NULL,   limit = 5,   min_length = 2,   language = NULL )"},{"path":"https://walker-data.com/mapboxapi/reference/mapboxGeocoderInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use Mapbox's Geocoder widget in a Shiny application — mapboxGeocoderInput","text":"inputId Shiny input ID access_token Mapbox access token (required); can set mb_access_token() placeholder placeholder used search box; defaults 'Search' search_within sf object, vector representing bounding box format c(min_longitude, min_latitude, max_longitude, max_latitude) used limit search results. Defaults NULL. proximity length-2 vector longitude latitude coordinates used prioritize results near location.  Defaults NULL. limit maximum number results show.  Defaults 5. min_length minimum number characters user must enter results shown.  Defaults 2. language language use geocoder.  Per Mapbox documentation, \"Options IETF language tags comprised mandatory ISO 639-1 language code optionally one IETF subtags country script.\"","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mapboxGeocoderInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use Mapbox's Geocoder widget in a Shiny application — mapboxGeocoderInput","text":"Mapbox geocoder widget Shiny input","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mapboxapi.html","id":null,"dir":"Reference","previous_headings":"","what":"An R interface to Mapbox web services — mapboxapi","title":"An R interface to Mapbox web services — mapboxapi","text":"Use Mapbox web services APIs spatial data science visualization projects R. Usage package governed Mapbox Terms Service.","code":""},{"path":[]},{"path":"https://walker-data.com/mapboxapi/reference/mapboxapi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An R interface to Mapbox web services — mapboxapi","text":"Kyle Walker","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mb_access_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Install or retrieve a Mapbox access token in your .Renviron for repeated use — mb_access_token","title":"Install or retrieve a Mapbox access token in your .Renviron for repeated use — mb_access_token","text":"See Mapbox API documentation information access tokens token scopes.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mb_access_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install or retrieve a Mapbox access token in your .Renviron for repeated use — mb_access_token","text":"","code":"mb_access_token(token, overwrite = FALSE, install = FALSE)  get_mb_access_token(   token = NULL,   default = c(\"MAPBOX_PUBLIC_TOKEN\", \"MAPBOX_SECRET_TOKEN\"),   secret_required = FALSE )  list_tokens(   username,   default = NULL,   limit = NULL,   sortby = \"created\",   usage = NULL,   access_token = NULL )"},{"path":"https://walker-data.com/mapboxapi/reference/mb_access_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install or retrieve a Mapbox access token in your .Renviron for repeated use — mb_access_token","text":"token Mapbox access token; can public (starting 'pk') secret (starting 'sk') scope, function interpret . overwrite Whether overwrite existing Mapbox access token. Defaults FALSE. install TRUE, install key .Renviron file use future sessions. Defaults FALSE. default TRUE, include default token account. FALSE, include tokens except default. Defaults NULL. secret_required TRUE, secret token required. FALSE, default token provided first token provided second first unavailable. username Mapbox username like list access tokens. limit maximum number tokens return. Defaults NULL. sortby sort returned tokens; one \"created\" \"modified\". usage \"pk\", returns public tokens; \"sk\", returns secret tokens. Defaults NULL, returns tokens scope supplied access token. access_token Mapbox access token. left NULL, first check see secret token stored .Renviron, public token.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mb_access_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install or retrieve a Mapbox access token in your .Renviron for repeated use — mb_access_token","text":"tibble information tokens Mapbox account.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mb_access_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install or retrieve a Mapbox access token in your .Renviron for repeated use — mb_access_token","text":"","code":"if (FALSE) { # \\dontrun{ my_token <- \"...\" # The token generated from your Mapbox account mb_access_token(my_token, install = TRUE) Sys.getenv(\"MAPBOX_PUBLIC_TOKEN\")  get_mb_access_token() } # } if (FALSE) { # \\dontrun{  token_list <- list_tokens(   username = \"kwalkertcu\", # You would use your own username here   limit = 10,   sortby = \"modified\" #' ) } # }"},{"path":"https://walker-data.com/mapboxapi/reference/mb_batch_geocode.html","id":null,"dir":"Reference","previous_headings":"","what":"Geocode addresses or locations in bulk using the Mapbox Batch Geocoding API — mb_batch_geocode","title":"Geocode addresses or locations in bulk using the Mapbox Batch Geocoding API — mb_batch_geocode","text":"Geocode addresses locations bulk using Mapbox Batch Geocoding API","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mb_batch_geocode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geocode addresses or locations in bulk using the Mapbox Batch Geocoding API — mb_batch_geocode","text":"","code":"mb_batch_geocode(   data,   search_column = NULL,   address_line1 = NULL,   address_number = NULL,   street = NULL,   block = NULL,   place = NULL,   region = NULL,   postcode = NULL,   locality = NULL,   neighborhood = NULL,   country = NULL,   permanent = FALSE,   limit = 1,   search_within = NULL,   language = NULL,   types = NULL,   proximity = NULL,   worldview = NULL,   allow_large_job = FALSE,   access_token = NULL,   sf = TRUE )"},{"path":"https://walker-data.com/mapboxapi/reference/mb_batch_geocode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geocode addresses or locations in bulk using the Mapbox Batch Geocoding API — mb_batch_geocode","text":"data input data frame search_column column contains description place geocode, full address.  search_column used address component arguments. address_line1 name column data contains first line address, e.g. \"1600 Pennsylvania Ave NW\" address_number name column data contains address number, e.g. \"1600\".  required address_line1 used. street name column data contains street name, e.g. \"Pennsylvania Ave NW\".  required address_line1 used. block name column data describes block, used Japanese addresses. place name column data contains place name; typically city, village, municipality, e.g. \"Washington\" region name column data represents sub-national administrative features, states Mexico United States.  Example: \"DC\" postcode name column data representing postal code address; ZIP code United States, e.g. \"20500\" locality name column data describes official sub-city locations, arrondissements France. neighborhood name column data represents colloquial neighborhood name location. country character string vector ISO 3166 alpha-2 country codes within like limit search. permanent Either FALSE (default) results intended stored, TRUE results planned stored. limit many results return per address.  currently accessible users can 1. search_within sf object, vector representing bounding box format c(min_longitude, min_latitude, max_longitude, max_latitude) used limit search results. Defaults NULL. language user's language, can help interpretation queries. Available languages found https://docs.mapbox.com/api/search/#language-coverage. types vector feature types limit search limited. Available options include 'country', 'region', 'postcode', 'district', 'place', 'locality', 'neighborhood', 'address', street, block, address. 'secondary_address'. left blank, types searched. proximity proximity Either vector coordinates IP address string bias results favor locations near input location. worldview Returns features intended different regional cultural groups.  US ('us') world view returned default. allow_large_job boolean indicating user OK potential charges incurred account due large geocoding job (1000 addresses).  Mapbox Free Tier includes 100,000 free geocodes per month.  Defaults FALSE. access_token Mapbox access token (required); can set mb_access_token() sf boolean determines whether output sf POINT object (TRUE, default) regular data frame (FALSE).","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mb_batch_geocode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geocode addresses or locations in bulk using the Mapbox Batch Geocoding API — mb_batch_geocode","text":"input dataset sf POINT object representing geocoded locations, input dataset longitude, latitude, matched address columns included.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mb_directions.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a request to the Mapbox Directions API — mb_directions","title":"Make a request to the Mapbox Directions API — mb_directions","text":"See Mapbox Directions API documentation information.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mb_directions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a request to the Mapbox Directions API — mb_directions","text":"","code":"mb_directions(   input_data = NULL,   origin = NULL,   destination = NULL,   profile = \"driving\",   output = \"sf\",   depart_at = NULL,   alternatives = NULL,   annotations = NULL,   bearings = NULL,   continue_straight = NULL,   exclude = NULL,   geometries = \"geojson\",   overview = \"simplified\",   radiuses = NULL,   approaches = NULL,   steps = NULL,   banner_instructions = NULL,   language = NULL,   roundabout_exits = NULL,   voice_instructions = NULL,   voice_units = NULL,   waypoint_names = NULL,   waypoint_targets = NULL,   waypoints = NULL,   walking_speed = NULL,   walkway_bias = NULL,   alley_bias = NULL,   access_token = NULL )"},{"path":"https://walker-data.com/mapboxapi/reference/mb_directions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a request to the Mapbox Directions API — mb_directions","text":"input_data input dataset class \"sf\", list coordinate pairs format c(longitude, latitude). used origin/destination pair. origin address coordinate pair represents origin requested route. used input_data. destination address coordinate pair represents destination requested route. profile One \"driving\" (default), \"driving-traffic\", \"walking\", \"cycling\". output One \"sf\" (default), returns sf LINESTRING representing route geometry, \"full\", returns full request Directions API list. depart_at (optional) \"driving\" \"driving-traffic\" profiles, departure date time reflect historical traffic patterns. \"driving-traffic\" used, live traffic mixed historical traffic dates/times near current time. specified ISO 8601 date/time, e.g. \"2022-03-31T09:00\". alternatives Whether return alternative routes request. TRUE, list 3 possible routes returned. annotations comma-separated string additional route metadata, may include duration, distance, speed, congestion. Must used overview = \"full\". bearings semicolon-delimited character string bearings continue_straight continue_straight exclude Road types exclude route; possible choices 'toll', 'motorway', 'ferry'. Defaults NULL. geometries route geometry format. output = 'sf', get back sf object leave blank. output = 'full', embedded route geometries one 'geojson' (default), 'polyline' five decimal place precision, 'polyline6'. overview left blank, defaults 'simplified' simplified geometry; option 'full' provides detailed geometry available. radiuses character string semicolon-separated radii specify distance (meters) snap input coordinate road network. Defaults NULL. approaches character string semicolon-separated specifications approach waypoints. Options include unrestricted curb. Defaults NULL uses unrestricted waypoints. steps TRUE, returns route object split route legs step--step instructions included. FALSE NULL (default), single line geometry representing full route returned. banner_instructions Whether return banner objects; available whenoutput = 'full' steps = TRUE. language language returned instructions (defaults English). Available language codes found https://docs.mapbox.com/api/navigation/#instructions-languages. available steps = TRUE. roundabout_exits TRUE, adds instructions roundabout entrance exit. available steps = TRUE. voice_instructions, voice_units available steps = TRUE output = 'full'. waypoint_names, waypoint_targets, waypoints available steps = TRUE output = 'full'. walking_speed walking speed meters/second; available profile = 'walking'. walkway_bias Can take values -1 1, negative numbers avoid walkways positive numbers prefer walkways. Available profile = 'walking'. alley_bias Can take values -1 1, negative numbers avoid alleys positive numbers prefer alleys. Available profile = 'walking'. access_token Mapbox access token; can set mb_access_token()","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mb_directions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a request to the Mapbox Directions API — mb_directions","text":"sf object (list sf objects), full R list representing API response.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mb_directions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a request to the Mapbox Directions API — mb_directions","text":"","code":"if (FALSE) { # \\dontrun{ library(mapboxapi) library(leaflet)  my_route <- mb_directions(   origin = \"10 Avenue de Wagram, 75008 Paris France\",   destination = \"59 Rue de Tocqueville, 75017 Paris France\",   profile = \"cycling\",   steps = TRUE,   language = \"fr\" )  leaflet(my_route) %>%   addMapboxTiles(     style_id = \"light-v9\",     username = \"mapbox\"   ) %>%   addPolylines() } # }"},{"path":"https://walker-data.com/mapboxapi/reference/mb_geocode.html","id":null,"dir":"Reference","previous_headings":"","what":"Geocode an address or place description using the Mapbox Geocoding API — mb_geocode","title":"Geocode an address or place description using the Mapbox Geocoding API — mb_geocode","text":"See Mapbox Geocoding API documentation information.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mb_geocode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geocode an address or place description using the Mapbox Geocoding API — mb_geocode","text":"","code":"mb_geocode(   search_text = NULL,   structured_input = NULL,   permanent = FALSE,   autocomplete = TRUE,   limit = 1,   types = NULL,   search_within = NULL,   language = NULL,   country = NULL,   proximity = NULL,   worldview = NULL,   output = \"coordinates\",   access_token = NULL )  mb_reverse_geocode(   coordinates,   permanent = FALSE,   limit = 1,   language = NULL,   types = NULL,   country = NULL,   worldview = NULL,   output = \"text\",   access_token = NULL )"},{"path":"https://walker-data.com/mapboxapi/reference/mb_geocode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geocode an address or place description using the Mapbox Geocoding API — mb_geocode","text":"search_text text search, formatted character string. Can address, location, description point interest. structured_input named list structured address inputs, used place search_text formal address inputs desired.  Available parameters, used names list elements, include 'address_line1', 'address_number', 'street', 'block', 'place', 'region', 'locality', 'neighborhood', 'country'.  See documentation: https://docs.mapbox.com/api/search/geocoding/#forward-geocoding--structured-input. permanent Either FALSE (default) results intended stored, TRUE results planned stored. autocomplete Whether return autocomplete results.  Defaults FALSE. limit many results return; defaults 1 (maximum 10). types vector feature types limit search limited. Available options include 'country', 'region', 'postcode', 'district', 'place', 'locality', 'neighborhood', 'address', street, block, address. 'secondary_address'. left blank, types searched. search_within sf object, vector representing bounding box format c(min_longitude, min_latitude, max_longitude, max_latitude) used limit search results. Defaults NULL. language user's language, can help interpretation queries. Available languages found https://docs.mapbox.com/api/search/#language-coverage. country character string vector ISO 3166 alpha-2 country codes within like limit search. proximity Either vector coordinates IP address string bias results favor locations near input location. worldview Returns features intended different regional cultural groups.  US ('us') world view returned default. output one \"text\" (default), return character string list character strings representing returned results; output = \"sf\", returning sf object; \"full\", return list full API response. access_token Mapbox access token (required); can set mb_access_token() coordinates coordinates location format c(longitude, latitude) like return information.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mb_geocode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geocode an address or place description using the Mapbox Geocoding API — mb_geocode","text":"character vector, list, sf object representing query results.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mb_geocode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geocode an address or place description using the Mapbox Geocoding API — mb_geocode","text":"","code":"if (FALSE) { # \\dontrun{  whitehouse <- mb_geocode(\"1600 Pennsylvania Ave, Washington DC\") } # }  if (FALSE) { # \\dontrun{  mb_reverse_geocode(c(77.5958768, 12.9667046), limit = 5, types = \"address\") } # }"},{"path":"https://walker-data.com/mapboxapi/reference/mb_isochrone.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate isochrones using the Mapbox Navigation Service Isochrone API — mb_isochrone","title":"Generate isochrones using the Mapbox Navigation Service Isochrone API — mb_isochrone","text":"function returns isochrones Mapbox Navigation Service Isochrone API. Isochrones shapes represent reachable area around one locations within given travel time. Isochrones can computed driving, walking, cycling routing profiles, can optionally set return distances rather times. mb_isochrone() returns isochrones simple features objects WGS 1984 geographic coordinate system.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mb_isochrone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate isochrones using the Mapbox Navigation Service Isochrone API — mb_isochrone","text":"","code":"mb_isochrone(   location,   profile = \"driving\",   time = c(5, 10, 15),   distance = NULL,   depart_at = NULL,   access_token = NULL,   denoise = 1,   generalize = NULL,   geometry = \"polygon\",   output = \"sf\",   rate_limit = 300,   keep_color_cols = FALSE,   id_column = NULL )"},{"path":"https://walker-data.com/mapboxapi/reference/mb_isochrone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate isochrones using the Mapbox Navigation Service Isochrone API — mb_isochrone","text":"location vector form c(longitude, latitude), address can geocoded character string, sf object. profile One \"driving\", \"walking\", \"cycling\", \"driving-traffic\". \"driving\" default. time vector isochrone contours, specified minutes. Defaults c(5, 10, 15). maximum time supported 60 minutes. Reflects traffic conditions date time function called. reproducibility isochrones required, supply argument depart_at parameter. distance vector distance contours specified meters. supplied, supercede call time parameter time distance used simultaneously. Defaults NULL. depart_at (optional) \"driving\" \"driving-traffic\" profiles, departure date time reflect historical traffic patterns. \"driving-traffic\" used, live traffic mixed historical traffic dates/times near current time. specified ISO 8601 date/time, e.g. \"2022-03-31T09:00\". NULL (default), isochrones reflect traffic conditions date time function called. access_token valid Mapbox access token. denoise floating-point value 0 1 used remove smaller contours. 1 default returns largest contour input time. generalize value expressed meters tolerance Douglas-Peucker generalization algorithm used simplify isochrone shapes. NULL (default), Mapbox API choose optimal value . geometry one \"polygon\" (default), returns isochrones polygons, alternatively \"linestring\", returns isochrones linestrings. output one \"sf\" (default), returns sf object representing isochrone(s), \"list\", returns GeoJSON response API R list. rate_limit rate limit API, expressed maximum number calls per minute. users 300 though parameter can modified based Mapbox plan. Used location \"sf\". keep_color_cols Whether retain color columns Mapbox API generates default (applies output sf object). Defaults FALSE. id_column input dataset sf object, column dataset want use isochrone ID. Otherwise, isochrone IDs identified row index position.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mb_isochrone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate isochrones using the Mapbox Navigation Service Isochrone API — mb_isochrone","text":"sf object representing isochrone(s) around location(s).","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mb_isochrone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate isochrones using the Mapbox Navigation Service Isochrone API — mb_isochrone","text":"","code":"if (FALSE) { # \\dontrun{  library(mapboxapi) library(mapdeck) isochrones <- mb_isochrone(\"The Kremlin, Moscow Russia\",   time = c(4, 8, 12),   profile = \"walking\" )  mapdeck(style = mapdeck_style(\"light\")) %>%   add_polygon(     data = isochrones,     fill_colour = \"time\",     fill_opacity = 0.5,     legend = TRUE   ) } # }"},{"path":"https://walker-data.com/mapboxapi/reference/mb_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a matrix of travel times from the Mapbox Directions API — mb_matrix","title":"Retrieve a matrix of travel times from the Mapbox Directions API — mb_matrix","text":"Retrieve matrix travel times Mapbox Directions API","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mb_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a matrix of travel times from the Mapbox Directions API — mb_matrix","text":"","code":"mb_matrix(   origins,   destinations = NULL,   profile = \"driving\",   fallback_speed = NULL,   output = c(\"duration\", \"distance\"),   duration_output = c(\"minutes\", \"seconds\"),   access_token = NULL,   depart_at = NULL,   allow_large_matrix = FALSE )"},{"path":"https://walker-data.com/mapboxapi/reference/mb_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a matrix of travel times from the Mapbox Directions API — mb_matrix","text":"origins input coordinates request. Acceptable inputs include list coordinate pair vectors c(x, y) format sf object. sf linestrings polygons, distance centroids taken. destinations destination coordinates request. NULL (default), many--many matrix using origins returned. profile One \"driving\" (default), \"driving-traffic\", \"walking\", \"cycling\". fallback_speed value expressed kilometers per hour used estimate travel time route found locations. returned travel time based straight-line estimate travel locations specified fallback speed. output one \"duration\" (default), measured either minutes seconds (depending value duration_output), \"distance\", returned meters. duration_output one \"minutes\" (default) \"seconds\" access_token Mapbox access token (required) depart_at (optional) \"driving\" \"driving-traffic\" profiles, departure date time reflect historical traffic patterns. \"driving-traffic\" used, live traffic mixed historical traffic dates/times near current time. specified ISO 8601 date/time, e.g. \"2023-03-31T09:00\". time must set current time future. allow_large_matrix mb_matrix() prevent user calculating large travel-time matrices (greater 25x25) default, may lead unexpected charges.  user sets argument TRUE, mb_matrix() bypass error calculate large matrix user.  Defaults FALSE.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mb_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a matrix of travel times from the Mapbox Directions API — mb_matrix","text":"R matrix source-destination travel times.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mb_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a matrix of travel times from the Mapbox Directions API — mb_matrix","text":"","code":"if (FALSE) { # \\dontrun{  library(mapboxapi) library(tigris) library(mapdeck)  philly_tracts <- tracts(\"PA\", \"Philadelphia\", cb = TRUE, class = \"sf\") downtown_philly <- mb_geocode(\"Philadelphia City Hall, Philadelphia PA\")  time_to_downtown <- mb_matrix(philly_tracts, downtown_philly)  philly_tracts$time <- time_to_downtown  mapdeck(style = mapdeck_style(\"light\")) %>%   add_polygon(     data = philly_tracts,     fill_colour = \"time\",     fill_opacity = 0.6,     legend = TRUE   ) } # }"},{"path":"https://walker-data.com/mapboxapi/reference/mb_optimized_route.html","id":null,"dir":"Reference","previous_headings":"","what":"Return an optimized route for a series of input coordinates — mb_optimized_route","title":"Return an optimized route for a series of input coordinates — mb_optimized_route","text":"Return optimized route series input coordinates","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mb_optimized_route.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return an optimized route for a series of input coordinates — mb_optimized_route","text":"","code":"mb_optimized_route(   input_data,   profile = c(\"driving\", \"walking\", \"cycling\", \"driving-traffic\"),   output = \"sf\",   source = c(\"any\", \"first\"),   destination = c(\"any\", \"last\"),   roundtrip = TRUE,   annotations = NULL,   approaches = NULL,   bearings = NULL,   distributions = NULL,   language = NULL,   overview = \"simplified\",   radiuses = NULL,   steps = NULL,   access_token = NULL )"},{"path":"https://walker-data.com/mapboxapi/reference/mb_optimized_route.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return an optimized route for a series of input coordinates — mb_optimized_route","text":"input_data input dataset class \"sf\", list coordinate pairs format c(longitude, latitude). Must 2 12 coordinate pairs. profile One \"driving\" (default), \"driving-traffic\", \"walking\", \"cycling\". output One \"sf\" (default), returns sf LINESTRING representing route geometry, \"full\", returns full request Directions API list. source One \"\" (default) \"first\". \"\" specified, input coordinates may used starting point. \"first\" specified, first coordinate used. destination One \"\" (default) \"last\". \"\" specified, input coordinates may used ending point. \"last\" specified, last coordinate used. roundtrip TRUE (default), route start end point. roundtrip = FALSE works source \"first\" destination \"last\". FALSE supplied , route start first point input_data end last point. annotations comma-separated string additional route metadata, may include duration, distance, speed, congestion. Must used overview = \"full\". approaches character string semicolon-separated specifications approach waypoints. Options include unrestricted curb. Defaults NULL uses unrestricted waypoints. bearings semicolon-delimited character string bearings. distributions semicolon-delimited character string number pairs specifies pick-drop-locations. first number indicates index pick-location, second number represents index drop-location. language language returned instructions (defaults English). Available language codes found https://docs.mapbox.com/api/navigation/#instructions-languages. available steps = TRUE. overview left blank, defaults 'simplified' simplified geometry; option 'full' provides detailed geometry available. radiuses character string semicolon-separated radii specify distance (meters) snap input coordinate road network. Defaults NULL. steps TRUE, returns route object split route legs step--step instructions included. FALSE NULL (default), single line geometry representing full route returned. access_token Mapbox access token; can set mb_access_token()","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mb_optimized_route.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return an optimized route for a series of input coordinates — mb_optimized_route","text":"Either list two sf objects - one representing waypoints, one representing route - R list representing full optimization API response.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mb_optimized_route.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return an optimized route for a series of input coordinates — mb_optimized_route","text":"","code":"if (FALSE) { # \\dontrun{  library(mapboxapi) library(sf)  to_visit <- data.frame(   X = c(-0.209307, -0.185875, -0.216877, -0.233511, -0.234541),   Y = c(5.556019, 5.58031, 5.582528, 5.566771, 5.550209) ) %>%   st_as_sf(coords = c(\"X\", \"Y\"), crs = 4326)  optimized_route <- mb_optimized_route(to_visit,   profile = \"driving-traffic\" ) } # }"},{"path":"https://walker-data.com/mapboxapi/reference/mts_create_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Mapbox tileset source from a sf object using the Mapbox Tiling Service API — mts_create_source","title":"Create a Mapbox tileset source from a sf object using the Mapbox Tiling Service API — mts_create_source","text":"mts_create_source() function can used create tileset source append existing tileset source.  function publishes simple features object created R Mapbox account, stored line-delimited GeoJSON. tileset source required create vector tileset, source can used across multiple tilesets.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mts_create_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Mapbox tileset source from a sf object using the Mapbox Tiling Service API — mts_create_source","text":"","code":"mts_create_source(data, tileset_id, username, access_token = NULL)"},{"path":"https://walker-data.com/mapboxapi/reference/mts_create_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Mapbox tileset source from a sf object using the Mapbox Tiling Service API — mts_create_source","text":"data input simple features object tileset_id tileset ID. tileset ID already exists Mapbox account, function overwrite existing source new source. username Mapbox username access_token Mapbox access token secret scope. Install mb_access_token() retrieve Mapbox account.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mts_create_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Mapbox tileset source from a sf object using the Mapbox Tiling Service API — mts_create_source","text":"list MTS API's responses, including name tileset source Mapbox account.  use name build MTS recipe.","code":""},{"path":[]},{"path":"https://walker-data.com/mapboxapi/reference/mts_create_source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Mapbox tileset source from a sf object using the Mapbox Tiling Service API — mts_create_source","text":"","code":"if (FALSE) { # \\dontrun{ library(tidycensus) library(mapboxapi) options(tigris_use_cache = TRUE)  # Get the national data on median age us_median_age_tract <- get_acs(   geography = \"tract\",   variables = \"B01002_001\",   state = c(state.abb, \"DC\"),   year = 2020,   geometry = TRUE )  # Get it for counties as well us_median_age_county <- get_acs(   geography = \"county\",   variables = \"B01002_001\",   year = 2020,   geometry = TRUE )  # Create a source from the datasets mts_create_source(data = us_median_age_tract,                   tileset_id = \"us_median_age_tract\",                   username = \"your_mapbox_username\")  mts_create_source(data = us_median_age_county,                   tileset_id = \"us_median_age_county\",                   username = \"your_mapbox_username\")  # Build out the recipe.  First, create a recipe layer with # appropriate options.  We'll want a larger tile size and to restrict the minzoom # to 4; a maxzoom of 12 will be fine as we can overzoom beyond that # # Your source ID will be returned by `mts_create_source()`, so use that value tract_layer <- recipe_layer(   source = \"mapbox://tileset-source/your_mapbox_username/us_median_age_tract\",   minzoom = 4,   maxzoom = 12,   tiles = tile_options(layer_size = 2500) )  county_layer <- recipe_layer(   source = \"mapbox://tileset-source/your_mapbox_username/us_median_age_county\",   minzoom = 2,   maxzoom = 5 )  recipe <- mts_make_recipe(tracts = tract_layer, counties = county_layer)  # Validate the recipe mts_validate_recipe(recipe)  # Create a tileset from the recipe mts_create_tileset(tileset_name = \"median_age_acs\",                    username = \"your_mapbox_username\",                    recipe = recipe)  # Publish the tileset mts_publish_tileset(tileset_name = \"median_age_acs\",                     username = \"your_mapbox_username\")  # If necessary, update the recipe mts_update_recipe(tileset_name = \"median_age_acs\",                   username = \"your_mapbox_username\",                   recipe = new_recipe)  # Publish the tileset again after you've updated the recipe mts_publish_tileset(tileset_name = \"median_age_acs\",                     username = \"your_mapbox_username\") } # }"},{"path":"https://walker-data.com/mapboxapi/reference/mts_create_tileset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tileset with the Mapbox Tiling Service API — mts_create_tileset","title":"Create a tileset with the Mapbox Tiling Service API — mts_create_tileset","text":"uploaded spatial data Mapbox account mts_create_source prepared valid recipe mts_make_recipe(), can use source recipe create vector tileset.  tileset hosted Mapbox account.  created successfully, need publish tileset using mts_publish_tileset use Mapbox Studio, Mapbox GL JS, R package can read Mapbox tilesets.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mts_create_tileset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tileset with the Mapbox Tiling Service API — mts_create_tileset","text":"","code":"mts_create_tileset(   tileset_name,   username,   recipe,   request_name = tileset_name,   access_token = NULL )"},{"path":"https://walker-data.com/mapboxapi/reference/mts_create_tileset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tileset with the Mapbox Tiling Service API — mts_create_tileset","text":"tileset_name name MTS tileset intend create username Mapbox username recipe MTS recipe, created mts_make_recipe() request_name name request; defaults tileset name access_token Mapbox access token","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mts_create_tileset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tileset with the Mapbox Tiling Service API — mts_create_tileset","text":"response API, formatted R list.","code":""},{"path":[]},{"path":"https://walker-data.com/mapboxapi/reference/mts_create_tileset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a tileset with the Mapbox Tiling Service API — mts_create_tileset","text":"","code":"if (FALSE) { # \\dontrun{ library(tidycensus) library(mapboxapi) options(tigris_use_cache = TRUE)  # Get the national data on median age us_median_age_tract <- get_acs(   geography = \"tract\",   variables = \"B01002_001\",   state = c(state.abb, \"DC\"),   year = 2020,   geometry = TRUE )  # Get it for counties as well us_median_age_county <- get_acs(   geography = \"county\",   variables = \"B01002_001\",   year = 2020,   geometry = TRUE )  # Create a source from the datasets mts_create_source(data = us_median_age_tract,                   tileset_id = \"us_median_age_tract\",                   username = \"your_mapbox_username\")  mts_create_source(data = us_median_age_county,                   tileset_id = \"us_median_age_county\",                   username = \"your_mapbox_username\")  # Build out the recipe.  First, create a recipe layer with # appropriate options.  We'll want a larger tile size and to restrict the minzoom # to 4; a maxzoom of 12 will be fine as we can overzoom beyond that # # Your source ID will be returned by `mts_create_source()`, so use that value tract_layer <- recipe_layer(   source = \"mapbox://tileset-source/your_mapbox_username/us_median_age_tract\",   minzoom = 4,   maxzoom = 12,   tiles = tile_options(layer_size = 2500) )  county_layer <- recipe_layer(   source = \"mapbox://tileset-source/your_mapbox_username/us_median_age_county\",   minzoom = 2,   maxzoom = 5 )  recipe <- mts_make_recipe(tracts = tract_layer, counties = county_layer)  # Validate the recipe mts_validate_recipe(recipe)  # Create a tileset from the recipe mts_create_tileset(tileset_name = \"median_age_acs\",                    username = \"your_mapbox_username\",                    recipe = recipe)  # Publish the tileset mts_publish_tileset(tileset_name = \"median_age_acs\",                     username = \"your_mapbox_username\")  # If necessary, update the recipe mts_update_recipe(tileset_name = \"median_age_acs\",                   username = \"your_mapbox_username\",                   recipe = new_recipe)  # Publish the tileset again after you've updated the recipe mts_publish_tileset(tileset_name = \"median_age_acs\",                     username = \"your_mapbox_username\") } # }"},{"path":"https://walker-data.com/mapboxapi/reference/mts_get_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the recipe for an MTS tileset in your Mapbox account — mts_get_recipe","title":"Retrieve the recipe for an MTS tileset in your Mapbox account — mts_get_recipe","text":"Retrieve recipe MTS tileset Mapbox account","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mts_get_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the recipe for an MTS tileset in your Mapbox account — mts_get_recipe","text":"","code":"mts_get_recipe(tileset_name, username, access_token = NULL)"},{"path":"https://walker-data.com/mapboxapi/reference/mts_get_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the recipe for an MTS tileset in your Mapbox account — mts_get_recipe","text":"tileset_name tileset name like retrieve recipe username Mapbox username access_token Mapbox access token secret scope","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mts_get_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the recipe for an MTS tileset in your Mapbox account — mts_get_recipe","text":"recipe tileset R list","code":""},{"path":[]},{"path":"https://walker-data.com/mapboxapi/reference/mts_get_recipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the recipe for an MTS tileset in your Mapbox account — mts_get_recipe","text":"","code":"if (FALSE) { # \\dontrun{ library(tidycensus) library(mapboxapi) options(tigris_use_cache = TRUE)  # Get the national data on median age us_median_age_tract <- get_acs(   geography = \"tract\",   variables = \"B01002_001\",   state = c(state.abb, \"DC\"),   year = 2020,   geometry = TRUE )  # Get it for counties as well us_median_age_county <- get_acs(   geography = \"county\",   variables = \"B01002_001\",   year = 2020,   geometry = TRUE )  # Create a source from the datasets mts_create_source(data = us_median_age_tract,                   tileset_id = \"us_median_age_tract\",                   username = \"your_mapbox_username\")  mts_create_source(data = us_median_age_county,                   tileset_id = \"us_median_age_county\",                   username = \"your_mapbox_username\")  # Build out the recipe.  First, create a recipe layer with # appropriate options.  We'll want a larger tile size and to restrict the minzoom # to 4; a maxzoom of 12 will be fine as we can overzoom beyond that # # Your source ID will be returned by `mts_create_source()`, so use that value tract_layer <- recipe_layer(   source = \"mapbox://tileset-source/your_mapbox_username/us_median_age_tract\",   minzoom = 4,   maxzoom = 12,   tiles = tile_options(layer_size = 2500) )  county_layer <- recipe_layer(   source = \"mapbox://tileset-source/your_mapbox_username/us_median_age_county\",   minzoom = 2,   maxzoom = 5 )  recipe <- mts_make_recipe(tracts = tract_layer, counties = county_layer)  # Validate the recipe mts_validate_recipe(recipe)  # Create a tileset from the recipe mts_create_tileset(tileset_name = \"median_age_acs\",                    username = \"your_mapbox_username\",                    recipe = recipe)  # Publish the tileset mts_publish_tileset(tileset_name = \"median_age_acs\",                     username = \"your_mapbox_username\")  # If necessary, update the recipe mts_update_recipe(tileset_name = \"median_age_acs\",                   username = \"your_mapbox_username\",                   recipe = new_recipe)  # Publish the tileset again after you've updated the recipe mts_publish_tileset(tileset_name = \"median_age_acs\",                     username = \"your_mapbox_username\") } # }"},{"path":"https://walker-data.com/mapboxapi/reference/mts_list_sources.html","id":null,"dir":"Reference","previous_headings":"","what":"List tileset sources in your Mapbox account — mts_list_sources","title":"List tileset sources in your Mapbox account — mts_list_sources","text":"List tileset sources Mapbox account","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mts_list_sources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List tileset sources in your Mapbox account — mts_list_sources","text":"","code":"mts_list_sources(   username,   sortby = c(\"created\", \"modified\"),   limit = 100,   start = NULL,   access_token = NULL )"},{"path":"https://walker-data.com/mapboxapi/reference/mts_list_sources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List tileset sources in your Mapbox account — mts_list_sources","text":"username Mapbox username sortby One \"created\" \"modified\"; returned data frame sorted one two options. limit number tileset sources return; defaults 100.  maximum number tileset sources returned endpoint 2000. start source ID start list sources; defaults NULL. access_token Mapbox access token secret scope.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mts_list_sources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List tileset sources in your Mapbox account — mts_list_sources","text":"data frame containing information tileset sources.","code":""},{"path":[]},{"path":"https://walker-data.com/mapboxapi/reference/mts_list_sources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List tileset sources in your Mapbox account — mts_list_sources","text":"","code":"if (FALSE) { # \\dontrun{ source_list <- mts_list_sources(username = \"your_mapbox_username\") } # }"},{"path":"https://walker-data.com/mapboxapi/reference/mts_list_tilesets.html","id":null,"dir":"Reference","previous_headings":"","what":"List tilesets in a Mapbox account — mts_list_tilesets","title":"List tilesets in a Mapbox account — mts_list_tilesets","text":"List tilesets Mapbox account","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mts_list_tilesets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List tilesets in a Mapbox account — mts_list_tilesets","text":"","code":"mts_list_tilesets(   username,   type = NULL,   visibility = NULL,   sortby = c(\"created\", \"modified\"),   limit = 100,   start = NULL,   access_token = NULL )"},{"path":"https://walker-data.com/mapboxapi/reference/mts_list_tilesets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List tilesets in a Mapbox account — mts_list_tilesets","text":"username Mapbox username type (optional) Return \"vector\" \"raster\" tilesets. left blank, tilesets returned. visibility Return \"public\" \"private\" tilesets. Public tilesets can returned public access token; private tilesets require user's access token secret scope. sortby One \"created\" \"modified\"; returned data frame sorted one two options. limit number tilesets return; defaults 100.  maximum number tilesets returned endpoint 500. start tileset ID start list sources; defaults NULL. access_token Mapbox access token secret scope.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mts_list_tilesets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List tilesets in a Mapbox account — mts_list_tilesets","text":"data frame containing information available tilesets given Mapbox account.","code":""},{"path":[]},{"path":"https://walker-data.com/mapboxapi/reference/mts_list_tilesets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List tilesets in a Mapbox account — mts_list_tilesets","text":"","code":"if (FALSE) { # \\dontrun{ tileset_list <- mts_list_tilesets(username = \"your_mapbox_username\") } # }"},{"path":"https://walker-data.com/mapboxapi/reference/mts_make_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a recipe for use with the Mapbox Tiling Service — mts_make_recipe","title":"Prepare a recipe for use with the Mapbox Tiling Service — mts_make_recipe","text":"Prepare recipe use Mapbox Tiling Service","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mts_make_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a recipe for use with the Mapbox Tiling Service — mts_make_recipe","text":"","code":"mts_make_recipe(...)"},{"path":"https://walker-data.com/mapboxapi/reference/mts_make_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a recipe for use with the Mapbox Tiling Service — mts_make_recipe","text":"... One named lists represent layers Mapbox Tiling Service recipe specification (https://docs.mapbox.com/mapbox-tiling-service/reference/#layer-example).  lists can prepared helper function recipe_layer(), prepared hand user prefers. multiple layers included, multi-layer recipe prepared can produce tilesets multiple sources.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mts_make_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a recipe for use with the Mapbox Tiling Service — mts_make_recipe","text":"R list representing MTS recipe used create tileset.","code":""},{"path":[]},{"path":"https://walker-data.com/mapboxapi/reference/mts_make_recipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare a recipe for use with the Mapbox Tiling Service — mts_make_recipe","text":"","code":"if (FALSE) { # \\dontrun{ library(tidycensus) library(mapboxapi) options(tigris_use_cache = TRUE)  # Get the national data on median age us_median_age_tract <- get_acs(   geography = \"tract\",   variables = \"B01002_001\",   state = c(state.abb, \"DC\"),   year = 2020,   geometry = TRUE )  # Get it for counties as well us_median_age_county <- get_acs(   geography = \"county\",   variables = \"B01002_001\",   year = 2020,   geometry = TRUE )  # Create a source from the datasets mts_create_source(data = us_median_age_tract,                   tileset_id = \"us_median_age_tract\",                   username = \"your_mapbox_username\")  mts_create_source(data = us_median_age_county,                   tileset_id = \"us_median_age_county\",                   username = \"your_mapbox_username\")  # Build out the recipe.  First, create a recipe layer with # appropriate options.  We'll want a larger tile size and to restrict the minzoom # to 4; a maxzoom of 12 will be fine as we can overzoom beyond that # # Your source ID will be returned by `mts_create_source()`, so use that value tract_layer <- recipe_layer(   source = \"mapbox://tileset-source/your_mapbox_username/us_median_age_tract\",   minzoom = 4,   maxzoom = 12,   tiles = tile_options(layer_size = 2500) )  county_layer <- recipe_layer(   source = \"mapbox://tileset-source/your_mapbox_username/us_median_age_county\",   minzoom = 2,   maxzoom = 5 )  recipe <- mts_make_recipe(tracts = tract_layer, counties = county_layer)  # Validate the recipe mts_validate_recipe(recipe)  # Create a tileset from the recipe mts_create_tileset(tileset_name = \"median_age_acs\",                    username = \"your_mapbox_username\",                    recipe = recipe)  # Publish the tileset mts_publish_tileset(tileset_name = \"median_age_acs\",                     username = \"your_mapbox_username\")  # If necessary, update the recipe mts_update_recipe(tileset_name = \"median_age_acs\",                   username = \"your_mapbox_username\",                   recipe = new_recipe)  # Publish the tileset again after you've updated the recipe mts_publish_tileset(tileset_name = \"median_age_acs\",                     username = \"your_mapbox_username\") } # }"},{"path":"https://walker-data.com/mapboxapi/reference/mts_publish_tileset.html","id":null,"dir":"Reference","previous_headings":"","what":"Publish a tileset with Mapbox Tiling Service — mts_publish_tileset","title":"Publish a tileset with Mapbox Tiling Service — mts_publish_tileset","text":"mts_publish_tileset() publishes existing vector tileset Mapbox account, allowing use vector tiles projects.  tileset name name specified mts_create_tileset().","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mts_publish_tileset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Publish a tileset with Mapbox Tiling Service — mts_publish_tileset","text":"","code":"mts_publish_tileset(tileset_name, username, access_token = NULL)"},{"path":"https://walker-data.com/mapboxapi/reference/mts_publish_tileset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Publish a tileset with Mapbox Tiling Service — mts_publish_tileset","text":"tileset_name name tileset (supplied mts_create_tileset()) username Mapbox username access_token Mapbox access token","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mts_publish_tileset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Publish a tileset with Mapbox Tiling Service — mts_publish_tileset","text":"response Mapbox Tiling Service API, formatted R list.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mts_publish_tileset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Publish a tileset with Mapbox Tiling Service — mts_publish_tileset","text":"published tileset conform rules specified recipe.  want change recipe tileset, use mts_update_recipe() re-publish tileset call mts_publish_tileset() .","code":""},{"path":[]},{"path":"https://walker-data.com/mapboxapi/reference/mts_publish_tileset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Publish a tileset with Mapbox Tiling Service — mts_publish_tileset","text":"","code":"if (FALSE) { # \\dontrun{ library(tidycensus) library(mapboxapi) options(tigris_use_cache = TRUE)  # Get the national data on median age us_median_age_tract <- get_acs(   geography = \"tract\",   variables = \"B01002_001\",   state = c(state.abb, \"DC\"),   year = 2020,   geometry = TRUE )  # Get it for counties as well us_median_age_county <- get_acs(   geography = \"county\",   variables = \"B01002_001\",   year = 2020,   geometry = TRUE )  # Create a source from the datasets mts_create_source(data = us_median_age_tract,                   tileset_id = \"us_median_age_tract\",                   username = \"your_mapbox_username\")  mts_create_source(data = us_median_age_county,                   tileset_id = \"us_median_age_county\",                   username = \"your_mapbox_username\")  # Build out the recipe.  First, create a recipe layer with # appropriate options.  We'll want a larger tile size and to restrict the minzoom # to 4; a maxzoom of 12 will be fine as we can overzoom beyond that # # Your source ID will be returned by `mts_create_source()`, so use that value tract_layer <- recipe_layer(   source = \"mapbox://tileset-source/your_mapbox_username/us_median_age_tract\",   minzoom = 4,   maxzoom = 12,   tiles = tile_options(layer_size = 2500) )  county_layer <- recipe_layer(   source = \"mapbox://tileset-source/your_mapbox_username/us_median_age_county\",   minzoom = 2,   maxzoom = 5 )  recipe <- mts_make_recipe(tracts = tract_layer, counties = county_layer)  # Validate the recipe mts_validate_recipe(recipe)  # Create a tileset from the recipe mts_create_tileset(tileset_name = \"median_age_acs\",                    username = \"your_mapbox_username\",                    recipe = recipe)  # Publish the tileset mts_publish_tileset(tileset_name = \"median_age_acs\",                     username = \"your_mapbox_username\")  # If necessary, update the recipe mts_update_recipe(tileset_name = \"median_age_acs\",                   username = \"your_mapbox_username\",                   recipe = new_recipe)  # Publish the tileset again after you've updated the recipe mts_publish_tileset(tileset_name = \"median_age_acs\",                     username = \"your_mapbox_username\") } # }"},{"path":"https://walker-data.com/mapboxapi/reference/mts_update_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a tileset's MTS recipe — mts_update_recipe","title":"Update a tileset's MTS recipe — mts_update_recipe","text":"Update tileset's MTS recipe","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mts_update_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a tileset's MTS recipe — mts_update_recipe","text":"","code":"mts_update_recipe(tileset_name, username, recipe, access_token = NULL)"},{"path":"https://walker-data.com/mapboxapi/reference/mts_update_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a tileset's MTS recipe — mts_update_recipe","text":"tileset_name name Mapbox tileset username Mapbox username recipe new recipe tileset, likely created mts_make_recipe(). access_token Mapbox access token","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mts_update_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a tileset's MTS recipe — mts_update_recipe","text":"update successful, function print message informing success.  Otherwise, list responses API returned letting know request invalid.","code":""},{"path":[]},{"path":"https://walker-data.com/mapboxapi/reference/mts_update_recipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a tileset's MTS recipe — mts_update_recipe","text":"","code":"if (FALSE) { # \\dontrun{ library(tidycensus) library(mapboxapi) options(tigris_use_cache = TRUE)  # Get the national data on median age us_median_age_tract <- get_acs(   geography = \"tract\",   variables = \"B01002_001\",   state = c(state.abb, \"DC\"),   year = 2020,   geometry = TRUE )  # Get it for counties as well us_median_age_county <- get_acs(   geography = \"county\",   variables = \"B01002_001\",   year = 2020,   geometry = TRUE )  # Create a source from the datasets mts_create_source(data = us_median_age_tract,                   tileset_id = \"us_median_age_tract\",                   username = \"your_mapbox_username\")  mts_create_source(data = us_median_age_county,                   tileset_id = \"us_median_age_county\",                   username = \"your_mapbox_username\")  # Build out the recipe.  First, create a recipe layer with # appropriate options.  We'll want a larger tile size and to restrict the minzoom # to 4; a maxzoom of 12 will be fine as we can overzoom beyond that # # Your source ID will be returned by `mts_create_source()`, so use that value tract_layer <- recipe_layer(   source = \"mapbox://tileset-source/your_mapbox_username/us_median_age_tract\",   minzoom = 4,   maxzoom = 12,   tiles = tile_options(layer_size = 2500) )  county_layer <- recipe_layer(   source = \"mapbox://tileset-source/your_mapbox_username/us_median_age_county\",   minzoom = 2,   maxzoom = 5 )  recipe <- mts_make_recipe(tracts = tract_layer, counties = county_layer)  # Validate the recipe mts_validate_recipe(recipe)  # Create a tileset from the recipe mts_create_tileset(tileset_name = \"median_age_acs\",                    username = \"your_mapbox_username\",                    recipe = recipe)  # Publish the tileset mts_publish_tileset(tileset_name = \"median_age_acs\",                     username = \"your_mapbox_username\")  # If necessary, update the recipe mts_update_recipe(tileset_name = \"median_age_acs\",                   username = \"your_mapbox_username\",                   recipe = new_recipe)  # Publish the tileset again after you've updated the recipe mts_publish_tileset(tileset_name = \"median_age_acs\",                     username = \"your_mapbox_username\") } # }"},{"path":"https://walker-data.com/mapboxapi/reference/mts_validate_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a Mapbox Tiling Service recipe — mts_validate_recipe","title":"Validate a Mapbox Tiling Service recipe — mts_validate_recipe","text":"Validate Mapbox Tiling Service recipe","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mts_validate_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a Mapbox Tiling Service recipe — mts_validate_recipe","text":"","code":"mts_validate_recipe(recipe, access_token = NULL)"},{"path":"https://walker-data.com/mapboxapi/reference/mts_validate_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a Mapbox Tiling Service recipe — mts_validate_recipe","text":"recipe recipe list, created mts_make_recipe() access_token Mapbox access token.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/mts_validate_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a Mapbox Tiling Service recipe — mts_validate_recipe","text":"response API indicating whether MTS recipe valid . recipe valid, returns TRUE, allowing use output function error handling pipelines.  recipe invalid, function returns FALSE prints API response telling recipe invalid.","code":""},{"path":[]},{"path":"https://walker-data.com/mapboxapi/reference/mts_validate_recipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a Mapbox Tiling Service recipe — mts_validate_recipe","text":"","code":"if (FALSE) { # \\dontrun{ library(tidycensus) library(mapboxapi) options(tigris_use_cache = TRUE)  # Get the national data on median age us_median_age_tract <- get_acs(   geography = \"tract\",   variables = \"B01002_001\",   state = c(state.abb, \"DC\"),   year = 2020,   geometry = TRUE )  # Get it for counties as well us_median_age_county <- get_acs(   geography = \"county\",   variables = \"B01002_001\",   year = 2020,   geometry = TRUE )  # Create a source from the datasets mts_create_source(data = us_median_age_tract,                   tileset_id = \"us_median_age_tract\",                   username = \"your_mapbox_username\")  mts_create_source(data = us_median_age_county,                   tileset_id = \"us_median_age_county\",                   username = \"your_mapbox_username\")  # Build out the recipe.  First, create a recipe layer with # appropriate options.  We'll want a larger tile size and to restrict the minzoom # to 4; a maxzoom of 12 will be fine as we can overzoom beyond that # # Your source ID will be returned by `mts_create_source()`, so use that value tract_layer <- recipe_layer(   source = \"mapbox://tileset-source/your_mapbox_username/us_median_age_tract\",   minzoom = 4,   maxzoom = 12,   tiles = tile_options(layer_size = 2500) )  county_layer <- recipe_layer(   source = \"mapbox://tileset-source/your_mapbox_username/us_median_age_county\",   minzoom = 2,   maxzoom = 5 )  recipe <- mts_make_recipe(tracts = tract_layer, counties = county_layer)  # Validate the recipe mts_validate_recipe(recipe)  # Create a tileset from the recipe mts_create_tileset(tileset_name = \"median_age_acs\",                    username = \"your_mapbox_username\",                    recipe = recipe)  # Publish the tileset mts_publish_tileset(tileset_name = \"median_age_acs\",                     username = \"your_mapbox_username\")  # If necessary, update the recipe mts_update_recipe(tileset_name = \"median_age_acs\",                   username = \"your_mapbox_username\",                   recipe = new_recipe)  # Publish the tileset again after you've updated the recipe mts_publish_tileset(tileset_name = \"median_age_acs\",                     username = \"your_mapbox_username\") } # }"},{"path":"https://walker-data.com/mapboxapi/reference/prep_overlay_markers.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare overlay markers for use in a Mapbox static map — prep_overlay_markers","title":"Prepare overlay markers for use in a Mapbox static map — prep_overlay_markers","text":"Markers prepared match GeoJSON marker-spec partial implementation GeoJSON simplestyle-spec (described work--progress Mapbox).","code":""},{"path":"https://walker-data.com/mapboxapi/reference/prep_overlay_markers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare overlay markers for use in a Mapbox static map — prep_overlay_markers","text":"","code":"prep_overlay_markers(   data = NULL,   marker_type = c(\"pin-s\", \"pin-l\", \"url\"),   label = NA,   color = NA,   longitude = NULL,   latitude = NULL,   url = NA )"},{"path":"https://walker-data.com/mapboxapi/reference/prep_overlay_markers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare overlay markers for use in a Mapbox static map — prep_overlay_markers","text":"data input data frame longitude latitude columns (X Y lon lat names also acceptable) sf object geometry type POINT. marker_type marker type; one \"pin-s\", small pin; \"pin-l\", large pin; \"url\", image path. marker_type length rows data, mix different marker types allowed. label marker label (optional). Can letter, number (0 99), valid Maki icon (see https://labs.mapbox.com/maki-icons/) options). color marker color (optional). color can specified color name three six-digit hexadecimal code (without number sign). longitude vector longitudes; inferred input dataset data provided. latitude vector latitudes; inferred input dataset data provided. url URL image used icon marker_type = \"url\".","code":""},{"path":"https://walker-data.com/mapboxapi/reference/prep_overlay_markers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare overlay markers for use in a Mapbox static map — prep_overlay_markers","text":"formatted list marker specifications can passed static_mapbox function.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/query_tiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about features in a tileset using the Tilequery API — query_tiles","title":"Get information about features in a tileset using the Tilequery API — query_tiles","text":"Get information features tileset using Tilequery API","code":""},{"path":"https://walker-data.com/mapboxapi/reference/query_tiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about features in a tileset using the Tilequery API — query_tiles","text":"","code":"query_tiles(   location,   tileset_id,   radius = 0,   limit = 5,   dedupe = TRUE,   geometry = NULL,   layers = NULL,   access_token = NULL )"},{"path":"https://walker-data.com/mapboxapi/reference/query_tiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information about features in a tileset using the Tilequery API — query_tiles","text":"location location like query tiles, expressed either length-2 vector longitude latitude address like geocode. tileset_id tileset ID query. radius radius around point (meters) like query features. point--polygon queries (e.g. \"county point located ?\") default 0 used. limit many features return (defaults 5). Can integer 1 50. dedupe Whether return duplicate features identified IDs. default, TRUE, de-duplicate dataset. geometry feature geometry type query - can \"point\", \"linestring\", \"polygon\". left blank, geometry types queried. layers vector layer IDs like query (recommended); left blank query layers, limitation 50 features can returned. access_token Mapbox access token, can set mb_access_token().","code":""},{"path":"https://walker-data.com/mapboxapi/reference/query_tiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get information about features in a tileset using the Tilequery API — query_tiles","text":"R list containing API response, includes information requested features. Parse list extract desired elements.","code":""},{"path":[]},{"path":"https://walker-data.com/mapboxapi/reference/query_tiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get information about features in a tileset using the Tilequery API — query_tiles","text":"","code":"if (FALSE) { # \\dontrun{  library(mapboxapi)  elevation <- query_tiles(   location = \"Breckenridge, Colorado\",   tileset_id = \"mapbox.mapbox-terrain-v2\",   layer = \"contour\",   limit = 50 )  max(elevation$features$properties$ele) } # }"},{"path":"https://walker-data.com/mapboxapi/reference/recipe_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a formatted recipe layer for use in a Mapbox Tiling Service recipe — recipe_layer","title":"Prepare a formatted recipe layer for use in a Mapbox Tiling Service recipe — recipe_layer","text":"Prepare formatted recipe layer use Mapbox Tiling Service recipe","code":""},{"path":"https://walker-data.com/mapboxapi/reference/recipe_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a formatted recipe layer for use in a Mapbox Tiling Service recipe — recipe_layer","text":"","code":"recipe_layer(   source,   minzoom,   maxzoom,   features = feature_options(),   tiles = tile_options() )"},{"path":"https://walker-data.com/mapboxapi/reference/recipe_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a formatted recipe layer for use in a Mapbox Tiling Service recipe — recipe_layer","text":"source tileset source ID. returned mts_create_source() can retrieved Mapbox account mts_list_sources(). minzoom minimum zoom level layer can viewed. maxzoom maximum zoom level layer rendered; layer still visible past maximum zoom level due overzooming. features list feature options, possibly generated feature_options(). tiles list tile options, possibly generated tile_options()","code":""},{"path":"https://walker-data.com/mapboxapi/reference/recipe_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a formatted recipe layer for use in a Mapbox Tiling Service recipe — recipe_layer","text":"recipe layer list used mts_make_recipe().","code":""},{"path":[]},{"path":"https://walker-data.com/mapboxapi/reference/recipe_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare a formatted recipe layer for use in a Mapbox Tiling Service recipe — recipe_layer","text":"","code":"if (FALSE) { # \\dontrun{ library(tidycensus) library(mapboxapi) options(tigris_use_cache = TRUE)  # Get the national data on median age us_median_age_tract <- get_acs(   geography = \"tract\",   variables = \"B01002_001\",   state = c(state.abb, \"DC\"),   year = 2020,   geometry = TRUE )  # Get it for counties as well us_median_age_county <- get_acs(   geography = \"county\",   variables = \"B01002_001\",   year = 2020,   geometry = TRUE )  # Create a source from the datasets mts_create_source(data = us_median_age_tract,                   tileset_id = \"us_median_age_tract\",                   username = \"your_mapbox_username\")  mts_create_source(data = us_median_age_county,                   tileset_id = \"us_median_age_county\",                   username = \"your_mapbox_username\")  # Build out the recipe.  First, create a recipe layer with # appropriate options.  We'll want a larger tile size and to restrict the minzoom # to 4; a maxzoom of 12 will be fine as we can overzoom beyond that # # Your source ID will be returned by `mts_create_source()`, so use that value tract_layer <- recipe_layer(   source = \"mapbox://tileset-source/your_mapbox_username/us_median_age_tract\",   minzoom = 4,   maxzoom = 12,   tiles = tile_options(layer_size = 2500) )  county_layer <- recipe_layer(   source = \"mapbox://tileset-source/your_mapbox_username/us_median_age_county\",   minzoom = 2,   maxzoom = 5 )  recipe <- mts_make_recipe(tracts = tract_layer, counties = county_layer)  # Validate the recipe mts_validate_recipe(recipe)  # Create a tileset from the recipe mts_create_tileset(tileset_name = \"median_age_acs\",                    username = \"your_mapbox_username\",                    recipe = recipe)  # Publish the tileset mts_publish_tileset(tileset_name = \"median_age_acs\",                     username = \"your_mapbox_username\")  # If necessary, update the recipe mts_update_recipe(tileset_name = \"median_age_acs\",                   username = \"your_mapbox_username\",                   recipe = new_recipe)  # Publish the tileset again after you've updated the recipe mts_publish_tileset(tileset_name = \"median_age_acs\",                     username = \"your_mapbox_username\") } # }"},{"path":"https://walker-data.com/mapboxapi/reference/static_mapbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a static Mapbox map from a specified style — static_mapbox","title":"Return a static Mapbox map from a specified style — static_mapbox","text":"function uses Mapbox Static Maps API return pointer \"magick-image\" class image httr::response object static map image URL.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/static_mapbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a static Mapbox map from a specified style — static_mapbox","text":"","code":"static_mapbox(   location = NULL,   buffer_dist = 1000,   units = \"m\",   style_id,   username,   style_url = NULL,   overlay_sf = NULL,   overlay_style = NULL,   overlay_markers = NULL,   longitude = NULL,   latitude = NULL,   zoom = NULL,   width = NULL,   height = NULL,   bearing = NULL,   pitch = NULL,   scale = 0.5,   scaling_factor = c(\"1x\", \"2x\"),   attribution = TRUE,   logo = TRUE,   before_layer = NULL,   access_token = NULL,   image = TRUE,   strip = TRUE )"},{"path":"https://walker-data.com/mapboxapi/reference/static_mapbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a static Mapbox map from a specified style — static_mapbox","text":"location input location like request tiles. Can length-4 vector representing bounding box, sf object. input sf object supplied, use buffer_dist argument control much area want capture around layer. input sf object can arbitrary coordinate reference system, length-4 bounding box vector supplied instead must represent WGS84 longitude/latitude coordinates order c(xmin, ymin, xmax, ymax). buffer_dist distance buffer around input sf object determining static map, specified units. location POINT object 2 rows less buffer_dist 0 NULL, 1 unit buffer applied try ensure creation valid bounding box map area. units Units buffer_dist; defaults \"m\" (meters). buffer_dist units class object, units argument ignored. style_id style ID (required style_url NULL). username Mapbox username (required style_url = NULL). style_url Mapbox style url; defaults NULL. overlay_sf overlay sf object (optional). function convert sf object GeoJSON plot basemap style. Spatial data large trigger error, added style Mapbox Studio instead. overlay_style named list vectors specifying style sf overlay. Possible names \"stroke\", \"stroke-width\" (\"stroke_width\"), \"stroke-opacity\" (\"stroke_opacity\"), \"fill\", \"fill-opacity\" (\"fill_opacity\"). fill stroke color values can specified six-digit hex codes color names, opacity width values supplied floating-point numbers. overlay_style NULL, style values can pulled columns names overlay_sf. overlay_markers prepared overlay markers (optional). See function prep_overlay_markers information specify marker overlay. longitude, latitude longitude latitude map center. overlay supplied, map default extent overlay unless longitude, latitude, zoom specified. zoom map zoom. map infer overlay unless longitude, latitude, zoom specified. width, height map width height; defaults NULL pitch, bearing map pitch bearing; defaults NULL. pitch can range 0 60, bearing -360 360. scale ratio scale output image; scale = 1 return largest possible image. defaults 0.5 scaling_factor scaling factor tiles; either \"1x\" (default) \"2x\" attribution Controls whether attribution image. Defaults TRUE. FALSE, watermarked attribution removed image. still legal responsibility attribute maps use OpenStreetMap data, includes maps Mapbox. specify attribution = FALSE, legally required include proper attribution elsewhere webpage document. logo Controls whether Mapbox logo image. Defaults TRUE. before_layer character string specifies hierarchy layer elements overlay inserted. overlay placed just specified layer given Mapbox styles. List layer ids map style get_style(style_id = style_id, username = username, style_url = style_url, access_token = access_token)[[\"layers\"]][[\"id\"]] access_token Mapbox access token; can set mb_access_token. image FALSE, return httr::response object httr::GET using static image URL; defaults TRUE. strip TRUE, drop image comments metadata image = TRUE; defaults TRUE.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/static_mapbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a static Mapbox map from a specified style — static_mapbox","text":"pointer image class \"magick-image\" image = TRUE. resulting image can manipulated functions magick package.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/static_mapbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a static Mapbox map from a specified style — static_mapbox","text":"","code":"if (FALSE) { # \\dontrun{  library(mapboxapi)  points_of_interest <- tibble::tibble(   longitude = c(-73.99405, -74.00616, -73.99577, -74.00761),   latitude = c(40.72033, 40.72182, 40.71590, 40.71428) )  prepped_pois <- prep_overlay_markers(   data = points_of_interest,   marker_type = \"pin-l\",   label = 1:4,   color = \"fff\" )  map <- static_mapbox(   style_id = \"streets-v11\",   username = \"mapbox\",   overlay_markers = prepped_pois,   width = 1200,   height = 800 )  map } # }"},{"path":"https://walker-data.com/mapboxapi/reference/tile_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify tile options for an MTS recipe layer — tile_options","title":"Specify tile options for an MTS recipe layer — tile_options","text":"Specify tile options MTS recipe layer","code":""},{"path":"https://walker-data.com/mapboxapi/reference/tile_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify tile options for an MTS recipe layer — tile_options","text":"","code":"tile_options(   bbox = NULL,   extent = NULL,   buffer_size = NULL,   limit = NULL,   union = list(where = NULL, group_by = NULL, aggregate = NULL, maintain_direction =     NULL, simplification = NULL),   filter = NULL,   attributes = NULL,   order = NULL,   remove_filled = NULL,   id = NULL,   layer_size = NULL )"},{"path":"https://walker-data.com/mapboxapi/reference/tile_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify tile options for an MTS recipe layer — tile_options","text":"bbox, extent, buffer_size, limit, union, filter, attributes, order, remove_filled, id, layer_size Tile options MTS recipe. See https://docs.mapbox.com/mapbox-tiling-service/reference/#tile-configuration information available options.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/tile_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify tile options for an MTS recipe layer — tile_options","text":"list tile options, likely used recipe_layer.","code":""},{"path":[]},{"path":"https://walker-data.com/mapboxapi/reference/tile_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify tile options for an MTS recipe layer — tile_options","text":"","code":"if (FALSE) { # \\dontrun{ library(tidycensus) library(mapboxapi) options(tigris_use_cache = TRUE)  # Get the national data on median age us_median_age_tract <- get_acs(   geography = \"tract\",   variables = \"B01002_001\",   state = c(state.abb, \"DC\"),   year = 2020,   geometry = TRUE )  # Get it for counties as well us_median_age_county <- get_acs(   geography = \"county\",   variables = \"B01002_001\",   year = 2020,   geometry = TRUE )  # Create a source from the datasets mts_create_source(data = us_median_age_tract,                   tileset_id = \"us_median_age_tract\",                   username = \"your_mapbox_username\")  mts_create_source(data = us_median_age_county,                   tileset_id = \"us_median_age_county\",                   username = \"your_mapbox_username\")  # Build out the recipe.  First, create a recipe layer with # appropriate options.  We'll want a larger tile size and to restrict the minzoom # to 4; a maxzoom of 12 will be fine as we can overzoom beyond that # # Your source ID will be returned by `mts_create_source()`, so use that value tract_layer <- recipe_layer(   source = \"mapbox://tileset-source/your_mapbox_username/us_median_age_tract\",   minzoom = 4,   maxzoom = 12,   tiles = tile_options(layer_size = 2500) )  county_layer <- recipe_layer(   source = \"mapbox://tileset-source/your_mapbox_username/us_median_age_county\",   minzoom = 2,   maxzoom = 5 )  recipe <- mts_make_recipe(tracts = tract_layer, counties = county_layer)  # Validate the recipe mts_validate_recipe(recipe)  # Create a tileset from the recipe mts_create_tileset(tileset_name = \"median_age_acs\",                    username = \"your_mapbox_username\",                    recipe = recipe)  # Publish the tileset mts_publish_tileset(tileset_name = \"median_age_acs\",                     username = \"your_mapbox_username\")  # If necessary, update the recipe mts_update_recipe(tileset_name = \"median_age_acs\",                   username = \"your_mapbox_username\",                   recipe = new_recipe)  # Publish the tileset again after you've updated the recipe mts_publish_tileset(tileset_name = \"median_age_acs\",                     username = \"your_mapbox_username\") } # }"},{"path":"https://walker-data.com/mapboxapi/reference/tippecanoe.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an .mbtiles file with tippecanoe — tippecanoe","title":"Generate an .mbtiles file with tippecanoe — tippecanoe","text":"Tippecanoe tile-generation utility building vector tilesets large (small) collections GeoJSON, Geobuf, CSV features. tippecanoe function requires tippecanoe utility installed system; see tippecanoe documentation installation instructions. installed, tippecanoe can used large visualization workflows concert Mapbox Studio.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/tippecanoe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an .mbtiles file with tippecanoe — tippecanoe","text":"","code":"tippecanoe(   input,   output,   layer_name = NULL,   min_zoom = NULL,   max_zoom = NULL,   drop_rate = NULL,   overwrite = TRUE,   other_options = NULL,   keep_geojson = FALSE )"},{"path":"https://walker-data.com/mapboxapi/reference/tippecanoe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an .mbtiles file with tippecanoe — tippecanoe","text":"input dataset generate vector tiles. Can sf object GeoJSON file disk. output name output .mbtiles file (.mbtiles extension). saved current working directory. layer_name name layer output .mbtiles file. NULL, either random string (input sf object) name input GeoJSON file (input file path). min_zoom, max_zoom minimum maximum zoom levels compute tiles. min_zoom max_zoom blank, tippecanoe guess best zoom levels data. drop_rate rate tippecanoe drop features zoom . NULL, tippecanoe drop features needed densest tiles stay within Mapbox's limits. overwrite TRUE, existing .mbtiles file name overwritten. other_options character string options passed tippecanoe program. keep_geojson Whether keep temporary CSV GeoJSON file used generate tiles. Defaults FALSE.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/tippecanoe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an .mbtiles file with tippecanoe — tippecanoe","text":"Mapbox also offers Mapbox Tiling Service alternate way transform datasets vector tiles.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/tippecanoe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an .mbtiles file with tippecanoe — tippecanoe","text":"","code":"if (FALSE) { # \\dontrun{  # Workflow: create a dynamic tileset for dot-density mapping library(tidycensus) library(sf) library(mapboxapi)  # Get population data for Census tracts in Vermont vt_population <- get_decennial(   geography = \"tract\",   variables = \"P001001\",   state = \"Vermont\",   year = 2010,   geometry = TRUE )  # Convert to representative dots - 1 per person vt_dots <- st_sample(   vt_population,   size = vt_population$value )  # Use tippecanoe to create dynamic tiles tippecanoe(   input = vt_dots,   output = \"vt_population.mbtiles\",   layer_name = \"vermont_population\",   max_zoom = 18,   drop_rate = 1.5 )  # Upload to your Mapbox account for visualization # A Mapbox secret access token must be set with mb_access_token() # to upload data to your account upload_tiles(   input = \"vt_population.mbtiles\",   username = \"kwalkertcu\",   tileset_id = \"vt_population_dots\",   multipart = TRUE ) } # }"},{"path":"https://walker-data.com/mapboxapi/reference/upload_tiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload dataset to your Mapbox account — upload_tiles","title":"Upload dataset to your Mapbox account — upload_tiles","text":"Upload dataset Mapbox account","code":""},{"path":"https://walker-data.com/mapboxapi/reference/upload_tiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload dataset to your Mapbox account — upload_tiles","text":"","code":"upload_tiles(   input,   username,   access_token = NULL,   tileset_id = NULL,   tileset_name = NULL,   keep_geojson = FALSE,   multipart = FALSE )"},{"path":"https://walker-data.com/mapboxapi/reference/upload_tiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload dataset to your Mapbox account — upload_tiles","text":"input sf object, path dataset upload character string. username Mapbox username access_token Mapbox access token; must secret scope tileset_id ID tileset Mapbox account tileset_name name tileset Mapbox account keep_geojson Whether keep temporary GeoJSON used generate tiles (input sf object) multipart Whether upload temporary AWS staging bucket multipart object; defaults FALSE.","code":""},{"path":"https://walker-data.com/mapboxapi/reference/upload_tiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upload dataset to your Mapbox account — upload_tiles","text":"","code":"if (FALSE) { # \\dontrun{  # Example: create a tileset of median age for all United States Census tracts # Requires setting a Mapbox secret access token as an environment variable  library(mapboxapi) library(tidycensus) options(tigris_use_cache = TRUE)  median_age <- get_acs(   geography = \"tract\",   variables = \"B01002_001\",   state = c(state.abb, \"DC\"),   geometry = TRUE )  upload_tiles(   input = median_age,   username = \"kwalkertcu\", # Your username goes here   tileset_id = \"median_age\",   tileset_name = \"us_median_age_2014_to_2018\" ) } # }"},{"path":"https://walker-data.com/mapboxapi/news/index.html","id":"mapboxapi-051","dir":"Changelog","previous_headings":"","what":"mapboxapi 0.5.1","title":"mapboxapi 0.5.1","text":"Support complex travel-time matrices Various bug fixes performance improvements","code":""},{"path":"https://walker-data.com/mapboxapi/news/index.html","id":"mapboxapi-05","dir":"Changelog","previous_headings":"","what":"mapboxapi 0.5","title":"mapboxapi 0.5","text":"CRAN release: 2022-09-15 Support Mapbox Tiling Service API, allowing publication maintenance vector tileset pipelines R.","code":""},{"path":"https://walker-data.com/mapboxapi/news/index.html","id":"mapboxapi-04","dir":"Changelog","previous_headings":"","what":"mapboxapi 0.4","title":"mapboxapi 0.4","text":"CRAN release: 2022-06-27 Enhancements mb_matrix() now allow distance-based matrices instead typical travel-time based matrices; Enhancements static basemap functionality, including new function tm_static_mapbox() use Mapbox static maps tmap basemaps; Various bug fixes, documentation improvements, internal performance improvements; Added NEWS.md file track changes package.","code":""}]
